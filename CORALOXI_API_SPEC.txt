
Search...
GlobalRoutersService
ConnectorsService
PresetsService
TestingService
EntitiesService
API Keys Service
SAML Configuration Service
Alert definitions service
Alert events service
Recording Rules Service
Dashboard service
Dashboard folders service
Actions Service
Slos Service
Events2Metrics Service
Events Service
Folders for views
Views
Scopes Service
Incidents service
MetricsTcoService
MetricsConfiguratorPublicService
Data Usage Service
Target Service
Team Permissions Management Service
Extension service
Extension deployment service
Extension testing service
Integration service
get
Get all integrations
get
Get integration definition
get
Get deployed integration
del
Delete integration
get
List managed integration keys
get
Get managed integration status
post
Save integration registration metadata
put
Update integration
post
Test integration
get
Get RUM integration versions data
post
Trigger sync of RUM integration data
get
Get integration template
get
Get integration details
Contextual data integration service
Outgoing webhooks service
Rule Groups Service
Enrichments Service
Custom Enrichments Service
Policies Service
Retentions Service
redocly logoAPI docs by Redocly
coralogix/model/data_pipeline/common/v1alpha/common.proto (version not set)
Download OpenAPI specification:Download

GlobalRoutersService
GlobalRoutersService_ListGlobalRouters
No description available

Authorizations:
apiKeyAuth
query Parameters
deprecatedEntityType	
string
entityType	
string
Default: "ENTITY_TYPE_UNSPECIFIED"
Enum: "ENTITY_TYPE_UNSPECIFIED" "ALERTS" "TEST_NOTIFICATIONS"
Responses
200 A successful response.
default An unexpected error response.

get
/v1/notification-center/routers
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/routers?deprecatedEntityType=SOME_STRING_VALUE&entityType=SOME_STRING_VALUE';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"routers": [
{}
]
}
GlobalRoutersService_CreateGlobalRouter
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
id	
string (A unique identifier - automatically generated unless provided by the user)
userDefinedId	
string (DEPRECATED - A unique identifier provided by the user)
deprecatedEntityType	
string (The source of the notification (e.g., "alerts"))
name
required
string
description	
string
rules	
Array of objects (The routing rules to be applied in order to determine the destinations of the notification, teh first rule that matches will be used)
fallback	
Array of objects (The fallback destinations to be used if no rule matches)
createTime	
string <date-time> (System-generated timestamp for when the router was last updated)
updateTime	
string <date-time> (System-generated timestamp for when the router was last updated)
entityLabels	
object
entityType
required
string (coralogixapisnotification_centerEntityType)
Default: "ENTITY_TYPE_UNSPECIFIED"
Enum: "ENTITY_TYPE_UNSPECIFIED" "ALERTS" "TEST_NOTIFICATIONS"
Responses
200 A successful response.
default An unexpected error response.

post
/v1/notification-center/routers
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"id": "a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9",
"userDefinedId": "user-provided-id",
"deprecatedEntityType": "string",
"name": "My Router",
"description": "string",
"rules": [
{}
],
"fallback": [
{}
],
"createTime": "2019-08-24T14:15:22Z",
"updateTime": "2019-08-24T14:15:22Z",
"entityLabels": {
"property1": "string",
"property2": "string"
},
"entityType": "ENTITY_TYPE_UNSPECIFIED"
}
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"router": {
"id": "a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9",
"userDefinedId": "user-provided-id",
"deprecatedEntityType": "string",
"name": "My Router",
"description": "string",
"rules": [],
"fallback": [],
"createTime": "2019-08-24T14:15:22Z",
"updateTime": "2019-08-24T14:15:22Z",
"entityLabels": {},
"entityType": "ENTITY_TYPE_UNSPECIFIED"
}
}
GlobalRoutersService_ReplaceGlobalRouter
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
id	
string (A unique identifier - automatically generated unless provided by the user)
userDefinedId	
string (DEPRECATED - A unique identifier provided by the user)
deprecatedEntityType	
string (The source of the notification (e.g., "alerts"))
name
required
string
description	
string
rules	
Array of objects (The routing rules to be applied in order to determine the destinations of the notification, teh first rule that matches will be used)
fallback	
Array of objects (The fallback destinations to be used if no rule matches)
createTime	
string <date-time> (System-generated timestamp for when the router was last updated)
updateTime	
string <date-time> (System-generated timestamp for when the router was last updated)
entityLabels	
object
entityType
required
string (coralogixapisnotification_centerEntityType)
Default: "ENTITY_TYPE_UNSPECIFIED"
Enum: "ENTITY_TYPE_UNSPECIFIED" "ALERTS" "TEST_NOTIFICATIONS"
Responses
200 A successful response.
default An unexpected error response.

put
/v1/notification-center/routers
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"id": "a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9",
"userDefinedId": "user-provided-id",
"deprecatedEntityType": "string",
"name": "My Router",
"description": "string",
"rules": [
{}
],
"fallback": [
{}
],
"createTime": "2019-08-24T14:15:22Z",
"updateTime": "2019-08-24T14:15:22Z",
"entityLabels": {
"property1": "string",
"property2": "string"
},
"entityType": "ENTITY_TYPE_UNSPECIFIED"
}
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"router": {
"id": "a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9",
"userDefinedId": "user-provided-id",
"deprecatedEntityType": "string",
"name": "My Router",
"description": "string",
"rules": [],
"fallback": [],
"createTime": "2019-08-24T14:15:22Z",
"updateTime": "2019-08-24T14:15:22Z",
"entityLabels": {},
"entityType": "ENTITY_TYPE_UNSPECIFIED"
}
}
GlobalRoutersService_GetGlobalRouter
No description available

Authorizations:
apiKeyAuth
path Parameters
id
required
string
query Parameters
deprecatedIdentifier.id	
string
deprecatedIdentifier.userFacingId	
string
identifier.id	
string
The unique identifier automatically generated by the service

identifier.userDefinedId	
string
The unique identifier provided by the user

Responses
200 A successful response.
default An unexpected error response.

get
/v1/notification-center/routers/{id}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/routers/%7Bid%7D?deprecatedIdentifier.id=SOME_STRING_VALUE&deprecatedIdentifier.userFacingId=SOME_STRING_VALUE&identifier.id=SOME_STRING_VALUE&identifier.userDefinedId=SOME_STRING_VALUE';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"router": {
"id": "a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9",
"userDefinedId": "user-provided-id",
"deprecatedEntityType": "string",
"name": "My Router",
"description": "string",
"rules": [],
"fallback": [],
"createTime": "2019-08-24T14:15:22Z",
"updateTime": "2019-08-24T14:15:22Z",
"entityLabels": {},
"entityType": "ENTITY_TYPE_UNSPECIFIED"
}
}
GlobalRoutersService_DeleteGlobalRouter
No description available

Authorizations:
apiKeyAuth
path Parameters
id
required
string
query Parameters
deprecatedIdentifier.id	
string
deprecatedIdentifier.userFacingId	
string
identifier.id	
string
The unique identifier automatically generated by the service

identifier.userDefinedId	
string
The unique identifier provided by the user

Responses
200 A successful response.
default An unexpected error response.

delete
/v1/notification-center/routers/{id}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/routers/%7Bid%7D?deprecatedIdentifier.id=SOME_STRING_VALUE&deprecatedIdentifier.userFacingId=SOME_STRING_VALUE&identifier.id=SOME_STRING_VALUE&identifier.userDefinedId=SOME_STRING_VALUE';

let options = {method: 'DELETE', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200default
Content type
application/json

Copy
{ }
GlobalRoutersService_BatchGetGlobalRouters
No description available

Authorizations:
apiKeyAuth
query Parameters
globalRouterIds	
Array of strings
Responses
200 A successful response.
default An unexpected error response.

get
/v1/notification-center/routers:batchGetSummaries
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/routers:batchGetSummaries?globalRouterIds=SOME_ARRAY_VALUE';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"routers": {
"property1": {},
"property2": {}
},
"notFoundIds": [
"global-router-id-3"
]
}
ConnectorsService
ConnectorsService_ReplaceConnector
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
id	
string (A unique identifier - automatically generated unless provided by the user)
userDefinedId	
string (DEPRECATED - A unique identifier provided by the user)
type
required
string (notification_centerConnectorType)
Default: "CONNECTOR_TYPE_UNSPECIFIED"
Enum: "CONNECTOR_TYPE_UNSPECIFIED" "SLACK" "GENERIC_HTTPS" "PAGERDUTY" "AWS" "IBM_EVENT_NOTIFICATIONS"
teamId	
integer <int64>
name
required
string <= 200 characters
description	
string <= 5000 characters
createTime	
string <date-time> (System-generated timestamp for when the connector was last updated)
updateTime	
string <date-time> (System-generated timestamp for when the connector was last updated)
configOverrides	
Array of objects (Configuration override templates for specific entity types, values from connector_configs will be used if not overridden)
connectorConfig	
object (Connector Config)
Configuration for a specific output schema of a connector

Find out more about notification center
Responses
200 A successful response.
default An unexpected error response.

put
/v1/notification-center/connector
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"id": "a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9",
"userDefinedId": "user-connector-id",
"type": "CONNECTOR_TYPE_UNSPECIFIED",
"teamId": "12345",
"name": "My Slack Connector",
"description": "Connector for team notifications",
"createTime": "2019-08-24T14:15:22Z",
"updateTime": "2019-08-24T14:15:22Z",
"configOverrides": [
{}
],
"connectorConfig": {
"fields": []
}
}
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"connector": {
"id": "a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9",
"userDefinedId": "user-connector-id",
"type": "CONNECTOR_TYPE_UNSPECIFIED",
"teamId": "12345",
"name": "My Slack Connector",
"description": "Connector for team notifications",
"createTime": "2019-08-24T14:15:22Z",
"updateTime": "2019-08-24T14:15:22Z",
"configOverrides": [],
"connectorConfig": {}
}
}
ConnectorsService_ListConnectors
No description available

Authorizations:
apiKeyAuth
query Parameters
connectorType	
string
Default: "CONNECTOR_TYPE_UNSPECIFIED"
Enum: "CONNECTOR_TYPE_UNSPECIFIED" "SLACK" "GENERIC_HTTPS" "PAGERDUTY" "AWS" "IBM_EVENT_NOTIFICATIONS"
Responses
200 A successful response.
default An unexpected error response.

get
/v1/notification-center/connectors
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors?connectorType=SOME_STRING_VALUE';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"connectors": [
{}
]
}
ConnectorsService_CreateConnector
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
id	
string (A unique identifier - automatically generated unless provided by the user)
userDefinedId	
string (DEPRECATED - A unique identifier provided by the user)
type
required
string (notification_centerConnectorType)
Default: "CONNECTOR_TYPE_UNSPECIFIED"
Enum: "CONNECTOR_TYPE_UNSPECIFIED" "SLACK" "GENERIC_HTTPS" "PAGERDUTY" "AWS" "IBM_EVENT_NOTIFICATIONS"
teamId	
integer <int64>
name
required
string <= 200 characters
description	
string <= 5000 characters
createTime	
string <date-time> (System-generated timestamp for when the connector was last updated)
updateTime	
string <date-time> (System-generated timestamp for when the connector was last updated)
configOverrides	
Array of objects (Configuration override templates for specific entity types, values from connector_configs will be used if not overridden)
connectorConfig	
object (Connector Config)
Configuration for a specific output schema of a connector

Find out more about notification center
Responses
200 A successful response.
default An unexpected error response.

post
/v1/notification-center/connectors
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"id": "a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9",
"userDefinedId": "user-connector-id",
"type": "CONNECTOR_TYPE_UNSPECIFIED",
"teamId": "12345",
"name": "My Slack Connector",
"description": "Connector for team notifications",
"createTime": "2019-08-24T14:15:22Z",
"updateTime": "2019-08-24T14:15:22Z",
"configOverrides": [
{}
],
"connectorConfig": {
"fields": []
}
}
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"connector": {
"id": "a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9",
"userDefinedId": "user-connector-id",
"type": "CONNECTOR_TYPE_UNSPECIFIED",
"teamId": "12345",
"name": "My Slack Connector",
"description": "Connector for team notifications",
"createTime": "2019-08-24T14:15:22Z",
"updateTime": "2019-08-24T14:15:22Z",
"configOverrides": [],
"connectorConfig": {}
}
}
ConnectorsService_GetConnector
No description available

Authorizations:
apiKeyAuth
path Parameters
id
required
string
query Parameters
deprecatedId	
string
identifier.id	
string
The unique identifier automatically generated by the service

identifier.userDefinedId	
string
Responses
200 A successful response.
default An unexpected error response.

get
/v1/notification-center/connectors/{id}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors/%7Bid%7D?deprecatedId=SOME_STRING_VALUE&identifier.id=SOME_STRING_VALUE&identifier.userDefinedId=SOME_STRING_VALUE';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"connector": {
"id": "a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9",
"userDefinedId": "user-connector-id",
"type": "CONNECTOR_TYPE_UNSPECIFIED",
"teamId": "12345",
"name": "My Slack Connector",
"description": "Connector for team notifications",
"createTime": "2019-08-24T14:15:22Z",
"updateTime": "2019-08-24T14:15:22Z",
"configOverrides": [],
"connectorConfig": {}
}
}
ConnectorsService_DeleteConnector
No description available

Authorizations:
apiKeyAuth
path Parameters
id
required
string
query Parameters
deprecatedId	
string
identifier.id	
string
The unique identifier automatically generated by the service

identifier.userDefinedId	
string
Responses
200 A successful response.
default An unexpected error response.

delete
/v1/notification-center/connectors/{id}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors/%7Bid%7D?deprecatedId=SOME_STRING_VALUE&identifier.id=SOME_STRING_VALUE&identifier.userDefinedId=SOME_STRING_VALUE';

let options = {method: 'DELETE', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200default
Content type
application/json

Copy
{ }
ConnectorsService_BatchGetConnectors
No description available

Authorizations:
apiKeyAuth
query Parameters
deprecatedIds	
Array of strings
connectorIds	
Array of strings
Responses
200 A successful response.
default An unexpected error response.

get
/v1/notification-center/connectors:batchGet
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors:batchGet?deprecatedIds=SOME_ARRAY_VALUE&connectorIds=SOME_ARRAY_VALUE';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"connectors": {
"property1": {},
"property2": {}
},
"notFoundIds": [
"connector-id-3"
]
}
ConnectorsService_BatchGetConnectorSummaries
No description available

Authorizations:
apiKeyAuth
query Parameters
deprecatedIds	
Array of strings
connectorIds	
Array of strings
Responses
200 A successful response.
default An unexpected error response.

get
/v1/notification-center/connectors:batchGetSummaries
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors:batchGetSummaries?deprecatedIds=SOME_ARRAY_VALUE&connectorIds=SOME_ARRAY_VALUE';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"connectorSummaries": {
"property1": {},
"property2": {}
},
"notFoundIds": [
"connector-id-3"
]
}
ConnectorsService_GetConnectorTypeSummaries
No description available

Authorizations:
apiKeyAuth
Responses
200 A successful response.
default An unexpected error response.

get
/v1/notification-center/connectors:getTypeSummaries
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors:getTypeSummaries';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"connectorTypeSummaries": [
{}
]
}
ConnectorsService_ListConnectorSummaries
No description available

Authorizations:
apiKeyAuth
query Parameters
connectorType	
string
Default: "CONNECTOR_TYPE_UNSPECIFIED"
Enum: "CONNECTOR_TYPE_UNSPECIFIED" "SLACK" "GENERIC_HTTPS" "PAGERDUTY" "AWS" "IBM_EVENT_NOTIFICATIONS"
Responses
200 A successful response.
default An unexpected error response.

get
/v1/notification-center/connectors:listSummaries
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/connectors:listSummaries?connectorType=SOME_STRING_VALUE';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"connectors": [
{}
]
}
PresetsService
PresetsService_CreateCustomPreset
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
id	
string (A unique identifier - automatically generated unless provided by the user)
userDefinedId	
string (DEPRECATED - A unique identifier provided by the user)
deprecatedEntityType	
string
connectorType	
string (notification_centerConnectorType)
Default: "CONNECTOR_TYPE_UNSPECIFIED"
Enum: "CONNECTOR_TYPE_UNSPECIFIED" "SLACK" "GENERIC_HTTPS" "PAGERDUTY" "AWS" "IBM_EVENT_NOTIFICATIONS"
configOverrides
required
Array of objects (A list of of configuration override templates, each associated with a specific output schema and condition)
name
required
string
description	
string
createTime	
string <date-time> (System-generated timestamp for when the preset was created)
updateTime	
string <date-time> (System-generated timestamp for when the preset was last updated)
presetType	
string (v1PresetType)
Default: "PRESET_TYPE_UNSPECIFIED"
Enum: "PRESET_TYPE_UNSPECIFIED" "SYSTEM" "CUSTOM"
entityType
required
string (coralogixapisnotification_centerEntityType)
Default: "ENTITY_TYPE_UNSPECIFIED"
Enum: "ENTITY_TYPE_UNSPECIFIED" "ALERTS" "TEST_NOTIFICATIONS"
parentId	
string
Responses
200 A successful response.
default An unexpected error response.

post
/v1/notification-center/presets/custom
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"id": "a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9",
"userDefinedId": "user-preset-id",
"deprecatedEntityType": "string",
"connectorType": "CONNECTOR_TYPE_UNSPECIFIED",
"configOverrides": [
{}
],
"name": "My Preset",
"description": "Custom preset for alerts",
"createTime": "2019-08-24T14:15:22Z",
"updateTime": "2019-08-24T14:15:22Z",
"presetType": "PRESET_TYPE_UNSPECIFIED",
"entityType": "ENTITY_TYPE_UNSPECIFIED",
"parentId": "preset_system_slack_alerts_detailed"
}
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"preset": {
"id": "a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9",
"userDefinedId": "user-preset-id",
"deprecatedEntityType": "string",
"connectorType": "CONNECTOR_TYPE_UNSPECIFIED",
"configOverrides": [],
"name": "My Preset",
"description": "Custom preset for alerts",
"createTime": "2019-08-24T14:15:22Z",
"updateTime": "2019-08-24T14:15:22Z",
"presetType": "PRESET_TYPE_UNSPECIFIED",
"entityType": "ENTITY_TYPE_UNSPECIFIED",
"parentId": "preset_system_slack_alerts_detailed"
}
}
PresetsService_ReplaceCustomPreset
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
id	
string (A unique identifier - automatically generated unless provided by the user)
userDefinedId	
string (DEPRECATED - A unique identifier provided by the user)
deprecatedEntityType	
string
connectorType	
string (notification_centerConnectorType)
Default: "CONNECTOR_TYPE_UNSPECIFIED"
Enum: "CONNECTOR_TYPE_UNSPECIFIED" "SLACK" "GENERIC_HTTPS" "PAGERDUTY" "AWS" "IBM_EVENT_NOTIFICATIONS"
configOverrides
required
Array of objects (A list of of configuration override templates, each associated with a specific output schema and condition)
name
required
string
description	
string
createTime	
string <date-time> (System-generated timestamp for when the preset was created)
updateTime	
string <date-time> (System-generated timestamp for when the preset was last updated)
presetType	
string (v1PresetType)
Default: "PRESET_TYPE_UNSPECIFIED"
Enum: "PRESET_TYPE_UNSPECIFIED" "SYSTEM" "CUSTOM"
entityType
required
string (coralogixapisnotification_centerEntityType)
Default: "ENTITY_TYPE_UNSPECIFIED"
Enum: "ENTITY_TYPE_UNSPECIFIED" "ALERTS" "TEST_NOTIFICATIONS"
parentId	
string
Responses
200 A successful response.
default An unexpected error response.

put
/v1/notification-center/presets/custom
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"id": "a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9",
"userDefinedId": "user-preset-id",
"deprecatedEntityType": "string",
"connectorType": "CONNECTOR_TYPE_UNSPECIFIED",
"configOverrides": [
{}
],
"name": "My Preset",
"description": "Custom preset for alerts",
"createTime": "2019-08-24T14:15:22Z",
"updateTime": "2019-08-24T14:15:22Z",
"presetType": "PRESET_TYPE_UNSPECIFIED",
"entityType": "ENTITY_TYPE_UNSPECIFIED",
"parentId": "preset_system_slack_alerts_detailed"
}
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"preset": {
"id": "a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9",
"userDefinedId": "user-preset-id",
"deprecatedEntityType": "string",
"connectorType": "CONNECTOR_TYPE_UNSPECIFIED",
"configOverrides": [],
"name": "My Preset",
"description": "Custom preset for alerts",
"createTime": "2019-08-24T14:15:22Z",
"updateTime": "2019-08-24T14:15:22Z",
"presetType": "PRESET_TYPE_UNSPECIFIED",
"entityType": "ENTITY_TYPE_UNSPECIFIED",
"parentId": "preset_system_slack_alerts_detailed"
}
}
PresetsService_DeleteCustomPreset
No description available

Authorizations:
apiKeyAuth
path Parameters
id
required
string
query Parameters
deprecatedIdentifier2.id	
string
deprecatedIdentifier2.userFacingId	
string
identifier.id	
string
The unique identifier automatically generated by the service

identifier.userDefinedId	
string
The unique identifier provided by the user

Responses
200 A successful response.
default An unexpected error response.

delete
/v1/notification-center/presets/custom/{id}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets/custom/%7Bid%7D?deprecatedIdentifier2.id=SOME_STRING_VALUE&deprecatedIdentifier2.userFacingId=SOME_STRING_VALUE&identifier.id=SOME_STRING_VALUE&identifier.userDefinedId=SOME_STRING_VALUE';

let options = {method: 'DELETE', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200default
Content type
application/json

Copy
{ }
PresetsService_SetCustomPresetAsDefault
No description available

Authorizations:
apiKeyAuth
path Parameters
id
required
string
query Parameters
deprecatedIdentifier2.id	
string
deprecatedIdentifier2.userFacingId	
string
identifier.id	
string
The unique identifier automatically generated by the service

identifier.userDefinedId	
string
The unique identifier provided by the user

Responses
200 A successful response.
default An unexpected error response.

post
/v1/notification-center/presets/custom/{id}:defaultSet
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets/custom/%7Bid%7D:defaultSet?deprecatedIdentifier2.id=SOME_STRING_VALUE&deprecatedIdentifier2.userFacingId=SOME_STRING_VALUE&identifier.id=SOME_STRING_VALUE&identifier.userDefinedId=SOME_STRING_VALUE';

let options = {method: 'POST', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200default
Content type
application/json

Copy
{ }
PresetsService_GetPreset
No description available

Authorizations:
apiKeyAuth
path Parameters
id
required
string
query Parameters
deprecatedIdentifier2.id	
string
deprecatedIdentifier2.userFacingId	
string
identifier.id	
string
The unique identifier automatically generated by the service

identifier.userDefinedId	
string
The unique identifier provided by the user

Responses
200 A successful response.
default An unexpected error response.

get
/v1/notification-center/presets/{id}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets/%7Bid%7D?deprecatedIdentifier2.id=SOME_STRING_VALUE&deprecatedIdentifier2.userFacingId=SOME_STRING_VALUE&identifier.id=SOME_STRING_VALUE&identifier.userDefinedId=SOME_STRING_VALUE';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"preset": {
"id": "a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9",
"userDefinedId": "user-preset-id",
"deprecatedEntityType": "string",
"connectorType": "CONNECTOR_TYPE_UNSPECIFIED",
"configOverrides": [],
"name": "My Preset",
"description": "Custom preset for alerts",
"createTime": "2019-08-24T14:15:22Z",
"updateTime": "2019-08-24T14:15:22Z",
"presetType": "PRESET_TYPE_UNSPECIFIED",
"entityType": "ENTITY_TYPE_UNSPECIFIED",
"parentId": "preset_system_slack_alerts_detailed"
}
}
PresetsService_SetPresetAsDefault
No description available

Authorizations:
apiKeyAuth
path Parameters
id
required
string
query Parameters
deprecatedIdentifier.id	
string
deprecatedIdentifier.userFacingId	
string
identifier.id	
string
The unique identifier automatically generated by the service

identifier.userDefinedId	
string
The unique identifier provided by the user

Responses
200 A successful response.
default An unexpected error response.

post
/v1/notification-center/presets/{id}:defaultSet
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets/%7Bid%7D:defaultSet?deprecatedIdentifier.id=SOME_STRING_VALUE&deprecatedIdentifier.userFacingId=SOME_STRING_VALUE&identifier.id=SOME_STRING_VALUE&identifier.userDefinedId=SOME_STRING_VALUE';

let options = {method: 'POST', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200default
Content type
application/json

Copy
{ }
PresetsService_BatchGetPresets
No description available

Authorizations:
apiKeyAuth
query Parameters
deprecatedIds	
Array of strings
presetIds	
Array of strings
Responses
200 A successful response.
default An unexpected error response.

get
/v1/notification-center/presets:batchGet
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets:batchGet?deprecatedIds=SOME_ARRAY_VALUE&presetIds=SOME_ARRAY_VALUE';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"presets": {
"property1": {},
"property2": {}
},
"notFoundIds": [
"string"
]
}
PresetsService_GetDefaultPresetSummary
No description available

Authorizations:
apiKeyAuth
query Parameters
connectorType	
string
Default: "CONNECTOR_TYPE_UNSPECIFIED"
Enum: "CONNECTOR_TYPE_UNSPECIFIED" "SLACK" "GENERIC_HTTPS" "PAGERDUTY" "AWS" "IBM_EVENT_NOTIFICATIONS"
deprecatedEntityType	
string
entityType	
string
Default: "ENTITY_TYPE_UNSPECIFIED"
Enum: "ENTITY_TYPE_UNSPECIFIED" "ALERTS" "TEST_NOTIFICATIONS"
Responses
200 A successful response.
default An unexpected error response.

get
/v1/notification-center/presets:defaultSummaryGet
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets:defaultSummaryGet?connectorType=SOME_STRING_VALUE&deprecatedEntityType=SOME_STRING_VALUE&entityType=SOME_STRING_VALUE';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"presetSummary": {
"id": "a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9",
"userDefinedId": "user-preset-id",
"deprecatedEntityType": "string",
"connectorType": "CONNECTOR_TYPE_UNSPECIFIED",
"parentId": "c246e826-10c2-405e-8d3f-afcc24ad4d15",
"name": "My Preset",
"description": "Custom preset for alerts",
"createTime": "2019-08-24T14:15:22Z",
"updateTime": "2019-08-24T14:15:22Z",
"presetType": "PRESET_TYPE_UNSPECIFIED",
"entityType": "ENTITY_TYPE_UNSPECIFIED"
}
}
PresetsService_ListPresetSummaries
No description available

Authorizations:
apiKeyAuth
query Parameters
connectorType	
string
Default: "CONNECTOR_TYPE_UNSPECIFIED"
Enum: "CONNECTOR_TYPE_UNSPECIFIED" "SLACK" "GENERIC_HTTPS" "PAGERDUTY" "AWS" "IBM_EVENT_NOTIFICATIONS"
deprecatedEntityType	
string
entityType	
string
Default: "ENTITY_TYPE_UNSPECIFIED"
Enum: "ENTITY_TYPE_UNSPECIFIED" "ALERTS" "TEST_NOTIFICATIONS"
Responses
200 A successful response.
default An unexpected error response.

get
/v1/notification-center/presets:summariesList
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets:summariesList?connectorType=SOME_STRING_VALUE&deprecatedEntityType=SOME_STRING_VALUE&entityType=SOME_STRING_VALUE';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"presetSummaries": [
{}
]
}
PresetsService_GetSystemDefaultPresetSummary
No description available

Authorizations:
apiKeyAuth
query Parameters
connectorType	
string
Default: "CONNECTOR_TYPE_UNSPECIFIED"
Enum: "CONNECTOR_TYPE_UNSPECIFIED" "SLACK" "GENERIC_HTTPS" "PAGERDUTY" "AWS" "IBM_EVENT_NOTIFICATIONS"
deprecatedEntityType	
string
entityType	
string
Default: "ENTITY_TYPE_UNSPECIFIED"
Enum: "ENTITY_TYPE_UNSPECIFIED" "ALERTS" "TEST_NOTIFICATIONS"
Responses
200 A successful response.
default An unexpected error response.

get
/v1/notification-center/presets:systemDefaultSummaryGet
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/presets:systemDefaultSummaryGet?connectorType=SOME_STRING_VALUE&deprecatedEntityType=SOME_STRING_VALUE&entityType=SOME_STRING_VALUE';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"presetSummary": {
"id": "a16e24c8-4db2-4abf-ba3c-c9e1fc35a3b9",
"userDefinedId": "user-preset-id",
"deprecatedEntityType": "string",
"connectorType": "CONNECTOR_TYPE_UNSPECIFIED",
"parentId": "c246e826-10c2-405e-8d3f-afcc24ad4d15",
"name": "My Preset",
"description": "Custom preset for alerts",
"createTime": "2019-08-24T14:15:22Z",
"updateTime": "2019-08-24T14:15:22Z",
"presetType": "PRESET_TYPE_UNSPECIFIED",
"entityType": "ENTITY_TYPE_UNSPECIFIED"
}
}
TestingService
TestingService_TestConnectorConfig
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
Request to test a connector configuration

type	
string (notification_centerConnectorType)
Default: "CONNECTOR_TYPE_UNSPECIFIED"
Enum: "CONNECTOR_TYPE_UNSPECIFIED" "SLACK" "GENERIC_HTTPS" "PAGERDUTY" "AWS" "IBM_EVENT_NOTIFICATIONS"
outputSchemaId	
string
fields	
Array of objects (coralogixapisnotification_centerConnectorConfigField)
deprecatedEntityType	
string
entityType	
string (coralogixapisnotification_centerEntityType)
Default: "ENTITY_TYPE_UNSPECIFIED"
Enum: "ENTITY_TYPE_UNSPECIFIED" "ALERTS" "TEST_NOTIFICATIONS"
Responses
200 A successful response.
default An unexpected error response.

post
/v1/notification-center/notifications/testing:testConnectorConfiguration
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"type": "CONNECTOR_TYPE_UNSPECIFIED",
"outputSchemaId": "default",
"fields": [
{}
],
"deprecatedEntityType": "string",
"entityType": "ENTITY_TYPE_UNSPECIFIED"
}
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"result": {
"success": { },
"failure": {}
}
}
TestingService_TestDestination
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
deprecatedEntityType	
string
entitySubType	
string
deprecatedConnectorId	
string
deprecatedPresetId	
string
outputSchemaId	
string
messageConfigFields	
Array of objects (Message Config Field)
connectorIdentifier	
object (Deprecated - use single id field instead)
presetIdentifier	
object (Deprecated - use single id field instead)
entityType	
string (coralogixapisnotification_centerEntityType)
Default: "ENTITY_TYPE_UNSPECIFIED"
Enum: "ENTITY_TYPE_UNSPECIFIED" "ALERTS" "TEST_NOTIFICATIONS"
connectorConfigFields	
Array of objects (notification_centerTemplatedConnectorConfigField)
connectorId	
string
presetId	
string
Responses
200 A successful response.
default An unexpected error response.

post
/v1/notification-center/notifications/testing:testDestination
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"deprecatedEntityType": "string",
"entitySubType": "logsImmediateResolved",
"deprecatedConnectorId": "string",
"deprecatedPresetId": "string",
"outputSchemaId": "default",
"messageConfigFields": [
{}
],
"connectorIdentifier": {
"id": "string",
"userDefinedId": "string"
},
"presetIdentifier": {
"id": "string",
"userDefinedId": "string"
},
"entityType": "ENTITY_TYPE_UNSPECIFIED",
"connectorConfigFields": [
{}
],
"connectorId": "string",
"presetId": "string"
}
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"result": {
"success": { },
"failure": {}
}
}
TestingService_TestExistingConnector
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
deprecatedConnectorId	
string
outputSchemaId	
string
connectorIdentifier	
object (Deprecated - use single id field instead)
connectorId	
string
Responses
200 A successful response.
default An unexpected error response.

post
/v1/notification-center/notifications/testing:testExistingConnector
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"deprecatedConnectorId": "string",
"outputSchemaId": "default",
"connectorIdentifier": {
"id": "string",
"userDefinedId": "string"
},
"connectorId": "string"
}
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"result": {
"success": { },
"failure": {}
}
}
TestingService_TestExistingPreset
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
deprecatedEntityType	
string
entitySubType	
string
deprecatedPresetId	
string
deprecatedConnectorId	
string
connectorIdentifier	
object (Deprecated - use single id field instead)
presetIdentifier	
object (Deprecated - use single id field instead)
entityType	
string (coralogixapisnotification_centerEntityType)
Default: "ENTITY_TYPE_UNSPECIFIED"
Enum: "ENTITY_TYPE_UNSPECIFIED" "ALERTS" "TEST_NOTIFICATIONS"
connectorId	
string
presetId	
string
Responses
200 A successful response.
default An unexpected error response.

post
/v1/notification-center/notifications/testing:testExistingPreset
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"deprecatedEntityType": "string",
"entitySubType": "logsImmediateResolved",
"deprecatedPresetId": "string",
"deprecatedConnectorId": "string",
"connectorIdentifier": {
"id": "string",
"userDefinedId": "string"
},
"presetIdentifier": {
"id": "string",
"userDefinedId": "string"
},
"entityType": "ENTITY_TYPE_UNSPECIFIED",
"connectorId": "string",
"presetId": "string"
}
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"result": {
"success": { },
"failure": {}
}
}
TestingService_TestPresetConfig
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
deprecatedEntityType	
string
entitySubType	
string
deprecatedConnectorId	
string
deprecatedPresetId	
string
configOverrides	
Array of objects (notification_centerConfigOverrides)
connectorIdentifier	
object (Deprecated - use single id field instead)
presetIdentifier	
object (Deprecated - use single id field instead)
entityType	
string (coralogixapisnotification_centerEntityType)
Default: "ENTITY_TYPE_UNSPECIFIED"
Enum: "ENTITY_TYPE_UNSPECIFIED" "ALERTS" "TEST_NOTIFICATIONS"
connectorId	
string
parentPresetId	
string
Responses
200 A successful response.
default An unexpected error response.

post
/v1/notification-center/notifications/testing:testPresetConfiguration
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"deprecatedEntityType": "string",
"entitySubType": "metric",
"deprecatedConnectorId": "string",
"deprecatedPresetId": "string",
"configOverrides": [
{}
],
"connectorIdentifier": {
"id": "string",
"userDefinedId": "string"
},
"presetIdentifier": {
"id": "string",
"userDefinedId": "string"
},
"entityType": "ENTITY_TYPE_UNSPECIFIED",
"connectorId": "string",
"parentPresetId": "string"
}
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"result": {
"success": { },
"failure": {}
}
}
TestingService_TestRoutingConditionValid
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
Request to check that provided routing condition is valid

deprecatedEntityType	
string
template	
string
entityType	
string (coralogixapisnotification_centerEntityType)
Default: "ENTITY_TYPE_UNSPECIFIED"
Enum: "ENTITY_TYPE_UNSPECIFIED" "ALERTS" "TEST_NOTIFICATIONS"
Responses
200 A successful response.
default An unexpected error response.

post
/v1/notification-center/notifications/testing:testRoutingConditionValid
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
{
"deprecatedEntityType": "string",
"template": "alertDef.priority == 'P1'",
"entityType": "ENTITY_TYPE_UNSPECIFIED"
}
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"success": {
"result": true
},
"failure": {
"message": "Invalid condition: condition should be rendered to a boolean value (true or false)"
}
}
TestingService_TestTemplateRender
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
deprecatedEntityType	
string
entitySubType	
string
template	
string
entityType	
string (coralogixapisnotification_centerEntityType)
Default: "ENTITY_TYPE_UNSPECIFIED"
Enum: "ENTITY_TYPE_UNSPECIFIED" "ALERTS" "TEST_NOTIFICATIONS"
Responses
200 A successful response.
default An unexpected error response.

post
/v1/notification-center/notifications/testing:testTemplateRender
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
{
"deprecatedEntityType": "string",
"entitySubType": "logsImmediateResolved",
"template": "{{ alertDef.name }}",
"entityType": "ENTITY_TYPE_UNSPECIFIED"
}
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"result": {
"success": {},
"failure": {}
}
}
EntitiesService
EntitiesService_ListEntityTypes
No description available

Authorizations:
apiKeyAuth
Responses
200 A successful response.
default An unexpected error response.

get
/v1/notification-center/entity-types
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/entity-types';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"deprecatedEntityTypes": [
"string"
],
"entityTypes": [
"ENTITY_TYPE_UNSPECIFIED"
]
}
EntitiesService_ListEntitySubTypes
No description available

Authorizations:
apiKeyAuth
path Parameters
entityType
required
string
Enum: "ENTITY_TYPE_UNSPECIFIED" "ALERTS" "TEST_NOTIFICATIONS"
Responses
200 A successful response.
default An unexpected error response.

get
/v1/notification-center/entity-types/{entityType}/entity-subtypes
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/notification-center/entity-types/%7BentityType%7D/entity-subtypes';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"entitySubTypes": [
"string"
]
}
API Keys Service
Manage your API Keys.

Create API Key
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
This data structure is used to create an API key.

name
required
string
owner
required
object (v3Owner)
keyPermissions
required
object (Key Permissions)
This data structure allows to specify loose permissions and permission presets for an API key.

Find out more about api keys
hashed
required
boolean
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v3/api_keys
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"name": "my_api_key",
"owner": {
"userId": "string",
"teamId": 0,
"organisationId": "string"
},
"keyPermissions": {
"presets": [],
"permissions": []
},
"hashed": true
}
Response samples
200400401500default
Content type
application/json

Copy
{
"keyId": "my_key_id",
"name": "my_api_key",
"value": "my_api_key_value"
}
Get "Send Data" API Keys
No description available

Authorizations:
apiKeyAuth
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v3/api_keys/send_data
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v3/api_keys/send_data';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"keys": [
{}
]
}
Get API Key
No description available

Authorizations:
apiKeyAuth
path Parameters
keyId
required
string
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v3/api_keys/{keyId}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v3/api_keys/%7BkeyId%7D';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"keyInfo": {
"name": "my_api_key",
"owner": {},
"active": true,
"hashed": true,
"keyPermissions": {},
"value": "string",
"id": "string"
}
}
Delete API Key
No description available

Authorizations:
apiKeyAuth
path Parameters
keyId
required
string
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

delete
/v3/api_keys/{keyId}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v3/api_keys/%7BkeyId%7D';

let options = {method: 'DELETE', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
{ }
Update API Key
No description available

Authorizations:
apiKeyAuth
path Parameters
keyId
required
string
Request Body schema: application/json
required
newName	
string
isActive	
boolean
presets	
object (Presets)
This data structure represents a set of permissions presets on an API key.

Find out more about api keys
permissions	
object (Permissions)
This data structure represents a set of permissions on an API key.

Find out more about api keys
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

put
/v3/api_keys/{keyId}
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"newName": "my_new_name",
"isActive": true,
"presets": {
"presets": []
},
"permissions": {
"permissions": []
}
}
Response samples
200400401500default
Content type
application/json

Copy
{ }
SAML Configuration Service
Manage your SAML configuration

Activate/Deactivate SAML
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
This data structure is used to activate or deactivate a SAML identity provider

teamId
required
integer <int64>
isActive
required
boolean
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/sso/saml/active
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
{
"teamId": 0,
"isActive": true
}
Response samples
200400401500default
Content type
application/json

Copy
{ }
Get SAML Configuration
No description available

Authorizations:
apiKeyAuth
query Parameters
teamId
required
integer <int64>
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v1/sso/saml/configuration
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/sso/saml/configuration?teamId=SOME_INTEGER_VALUE';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"teamId": 0,
"spParameters": {
"metadataUrl": "https://<...>.okta.com/app/<...>/sso/saml/metadata",
"signingCertPem": "certificate",
"nameIdFormat": "name_id",
"assertionConsumerServiceUrl": "assertion",
"binding": "binding"
},
"idpParameters": {
"active": true,
"metadataUrl": "https://<...>.okta.com/app/<...>/sso/saml/metadata",
"metadataContent": "<?xml version= ...",
"teamEntityId": 1234567,
"groupNames": []
},
"idpDetails": {
"name": "string",
"icon": "string"
}
}
Set IDP Parameters
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
This data structure is used to set the parameters of a SAML identity provider

teamId
required
integer <int64>
params
required
object (IDP Parameters)
This data structure represents a set of SAML identity provider parameters

Find out more about enrichments
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/sso/saml/idp_parameters
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"teamId": 0,
"params": {
"active": true,
"metadataUrl": "https://<...>.okta.com/app/<...>/sso/saml/metadata",
"metadataContent": "<?xml version= ...",
"teamEntityId": 1234567,
"groupNames": []
}
}
Response samples
200400401500default
Content type
application/json

Copy
{ }
Get SP Parameters
No description available

Authorizations:
apiKeyAuth
query Parameters
teamId
required
integer <int64>
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v1/sso/saml/sp_parameters
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/sso/saml/sp_parameters?teamId=SOME_INTEGER_VALUE';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"params": {
"metadataUrl": "https://<...>.okta.com/app/<...>/sso/saml/metadata",
"signingCertPem": "certificate",
"nameIdFormat": "name_id",
"assertionConsumerServiceUrl": "assertion",
"binding": "binding"
}
}
Alert definitions service
View and manage your alerts using alert definitions - data structures that contain the configuration required to create an alert.

Learn more about alerts in our documentation
Get a list of all accessible alert definitions
No description available

Authorizations:
apiKeyAuth
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v3/alert-defs
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v3/alert-defs';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"alertDefs": [
{}
]
}
Create an alert
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
name
required
string
The name of the alert definition

description	
string
A detailed description of what the alert monitors and when it triggers

enabled	
boolean
Default: "true"
Whether the alert is currently active and monitoring

priority
required
string (v3AlertDefPriority)
Default: "ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED"
Enum: "ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED" "ALERT_DEF_PRIORITY_P4" "ALERT_DEF_PRIORITY_P3" "ALERT_DEF_PRIORITY_P2" "ALERT_DEF_PRIORITY_P1"
activeOn	
object (Alert activity schedule)
Defines when an alert should be active based on days of the week and time windows

type
required
string (v3AlertDefType)
Default: "ALERT_DEF_TYPE_LOGS_IMMEDIATE_OR_UNSPECIFIED"
Enum: "ALERT_DEF_TYPE_LOGS_IMMEDIATE_OR_UNSPECIFIED" "ALERT_DEF_TYPE_LOGS_THRESHOLD" "ALERT_DEF_TYPE_LOGS_ANOMALY" "ALERT_DEF_TYPE_LOGS_RATIO_THRESHOLD" "ALERT_DEF_TYPE_LOGS_NEW_VALUE" "ALERT_DEF_TYPE_LOGS_UNIQUE_COUNT" "ALERT_DEF_TYPE_LOGS_TIME_RELATIVE_THRESHOLD" "ALERT_DEF_TYPE_METRIC_THRESHOLD" "ALERT_DEF_TYPE_METRIC_ANOMALY" "ALERT_DEF_TYPE_TRACING_IMMEDIATE" "ALERT_DEF_TYPE_TRACING_THRESHOLD" "ALERT_DEF_TYPE_FLOW" "ALERT_DEF_TYPE_SLO_THRESHOLD"
logsImmediate	
object (Logs immediate alert type)
Configuration for immediate alerts triggered on log entries matching specific filters.

Learn more about logs immediate alerts in our documentation
tracingImmediate	
object (Trace-based immediate alert type)
Configuration for immediate alerts triggered on trace entries

Learn more about trace-based alerts in our documentation.
logsThreshold	
object (Log-based threshold alert type)
Configuration for alerts triggered when log counts exceed or fall below specified thresholds

Learn more about log-based threshold alerts in our documentation
logsRatioThreshold	
object (Log-based ratio threshold alert type)
Configuration for alerts based on the ratio between two log queries

Learn more about logs ratio alerts in our documentation
logsTimeRelativeThreshold	
object (Log-based time-relative threshold alert type)
Configuration for alerts that are triggered when a fixed ratio reaches a set threshold compared to a past time frame.

Learn more about log-based, time-relative alerts in our documentation
metricThreshold	
object (Metric-based threshold alert type)
Configuration for alerts based on metric threshold violations

Learn more about metric-based threshold alerts in our documentation
tracingThreshold	
object (Trace-based threshold alert type)
Configuration for alerts based on trace count thresholds

Learn more about trace-based alerts in our documentation
flow	
object (Flow alert type)
Configuration for flow-based alerts with multiple stages

Learn more about flow alerts in our documentation
logsAnomaly	
object (Log-based anomaly alert type)
Configuration for alerts triggered by anomalous log patterns

Learn more about logs anomaly alerts in our documentation
metricAnomaly	
object (Metric-based anomaly alert type)
Configuration for alerts triggered by anomalous metric patterns

Learn more about metric-based anomaly alerts in our documentation
logsNewValue	
object (Log-based new value alert type)
Configuration for alerts triggered by new values appearing in logs

logsUniqueCount	
object (Log-based unique count alert type)
Configuration for alerts based on unique value counts in logs

Learn more about log-based, unique count alerts in our documentation
sloThreshold	
object (SLO Threshold Type)
SLO threshold type definition

groupByKeys	
Array of strings
Keys used to group and aggregate alert data

incidentsSettings	
object (Alert definition incident settings)
notificationGroup	
object (Alert definition notification group)
notificationGroupExcess	
Array of objects (Alert definition notification group)
Additional notification groups for alerts (deprecated)

entityLabels	
object
Labels used to identify and categorize the alert entity

phantomMode	
boolean
Default: "false"
Whether the alert is in phantom mode (creating incidents or not)

deleted	
boolean
Default: "false"
Whether the alert has been marked as deleted

Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v3/alert-defs
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"name": "My Alert",
"description": "Alert description",
"enabled": true,
"priority": "ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED",
"activeOn": {
"dayOfWeek": [],
"startTime": {},
"endTime": {}
},
"type": "ALERT_DEF_TYPE_LOGS_IMMEDIATE_OR_UNSPECIFIED",
"logsImmediate": {
"logsFilter": {},
"notificationPayloadFilter": []
},
"tracingImmediate": {
"tracingFilter": {},
"notificationPayloadFilter": []
},
"logsThreshold": {
"logsFilter": {},
"undetectedValuesManagement": {},
"rules": [],
"notificationPayloadFilter": [],
"evaluationDelayMs": 60000
},
"logsRatioThreshold": {
"numerator": {},
"numeratorAlias": "numerator_alias",
"denominator": {},
"denominatorAlias": "denominator_alias",
"rules": [],
"notificationPayloadFilter": [],
"groupByFor": "LOGS_RATIO_GROUP_BY_FOR_BOTH_OR_UNSPECIFIED",
"undetectedValuesManagement": {},
"ignoreInfinity": true,
"evaluationDelayMs": 60000
},
"logsTimeRelativeThreshold": {
"logsFilter": {},
"rules": [],
"ignoreInfinity": true,
"notificationPayloadFilter": [],
"undetectedValuesManagement": {},
"evaluationDelayMs": 60000
},
"metricThreshold": {
"metricFilter": {},
"rules": [],
"undetectedValuesManagement": {},
"missingValues": {},
"evaluationDelayMs": 60000
},
"tracingThreshold": {
"tracingFilter": {},
"rules": [],
"notificationPayloadFilter": []
},
"flow": {
"stages": [],
"enforceSuppression": true
},
"logsAnomaly": {
"logsFilter": {},
"rules": [],
"notificationPayloadFilter": [],
"evaluationDelayMs": 60000,
"anomalyAlertSettings": {}
},
"metricAnomaly": {
"metricFilter": {},
"rules": [],
"evaluationDelayMs": 60000,
"anomalyAlertSettings": {}
},
"logsNewValue": {
"logsFilter": {},
"rules": [],
"notificationPayloadFilter": []
},
"logsUniqueCount": {
"logsFilter": {},
"rules": [],
"notificationPayloadFilter": [],
"maxUniqueCountPerGroupByKey": 100,
"uniqueCountKeypath": "obj.field"
},
"sloThreshold": {
"sloDefinition": {},
"errorBudget": {},
"burnRate": {}
},
"groupByKeys": [
"key1",
"key2"
],
"incidentsSettings": {
"minutes": 30,
"notifyOn": "NOTIFY_ON_TRIGGERED_ONLY_UNSPECIFIED"
},
"notificationGroup": {
"groupByKeys": [],
"webhooks": [],
"destinations": [],
"router": {}
},
"notificationGroupExcess": [
{}
],
"entityLabels": {
"key": "value"
},
"phantomMode": false,
"deleted": false
}
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"alertDef": {
"alertDefProperties": {},
"id": "123e4567-e89b-12d3-a456-426614174000",
"alertVersionId": "string",
"createdTime": "2023-10-01T12:00:00.000Z",
"updatedTime": "2023-10-01T12:00:00.000Z"
}
}
Replace an alert definition
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
A request to replace an existing alert definition

alertDefProperties
required
object (Alert definition properties)
User-configurable properties of an alert definition

id
required
string (Alert definition ID)
Alert definition ID

Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

put
/v3/alert-defs
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"alertDefProperties": {
"name": "My Alert",
"description": "Alert description",
"enabled": true,
"priority": "ALERT_DEF_PRIORITY_P5_OR_UNSPECIFIED",
"activeOn": {},
"type": "ALERT_DEF_TYPE_LOGS_IMMEDIATE_OR_UNSPECIFIED",
"logsImmediate": {},
"tracingImmediate": {},
"logsThreshold": {},
"logsRatioThreshold": {},
"logsTimeRelativeThreshold": {},
"metricThreshold": {},
"tracingThreshold": {},
"flow": {},
"logsAnomaly": {},
"metricAnomaly": {},
"logsNewValue": {},
"logsUniqueCount": {},
"sloThreshold": {},
"groupByKeys": [],
"incidentsSettings": {},
"notificationGroup": {},
"notificationGroupExcess": [],
"entityLabels": {},
"phantomMode": false,
"deleted": false
},
"id": "123e4567-e89b-12d3-a456-426614174000"
}
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"alertDef": {
"alertDefProperties": {},
"id": "123e4567-e89b-12d3-a456-426614174000",
"alertVersionId": "string",
"createdTime": "2023-10-01T12:00:00.000Z",
"updatedTime": "2023-10-01T12:00:00.000Z"
}
}
Get alert definition by alert version ID
No description available

Authorizations:
apiKeyAuth
path Parameters
alertVersionId
required
string <UUIDv4>
Alert version ID

Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v3/alert-defs/alert-version-id/{alertVersionId}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v3/alert-defs/alert-version-id/%7BalertVersionId%7D';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"alertDef": {
"alertDefProperties": {},
"id": "123e4567-e89b-12d3-a456-426614174000",
"alertVersionId": "string",
"createdTime": "2023-10-01T12:00:00.000Z",
"updatedTime": "2023-10-01T12:00:00.000Z"
}
}
Get alert definition by ID
No description available

Authorizations:
apiKeyAuth
path Parameters
id
required
string <UUIDv4>
Alert definition ID

Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v3/alert-defs/{id}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v3/alert-defs/%7Bid%7D';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"alertDef": {
"alertDefProperties": {},
"id": "123e4567-e89b-12d3-a456-426614174000",
"alertVersionId": "string",
"createdTime": "2023-10-01T12:00:00.000Z",
"updatedTime": "2023-10-01T12:00:00.000Z"
}
}
AlertDefsService_DeleteAlertDef
No description available

Authorizations:
apiKeyAuth
path Parameters
id
required
string <UUIDv4>
Alert definition ID

Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

delete
/v3/alert-defs/{id}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v3/alert-defs/%7Bid%7D';

let options = {method: 'DELETE', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
{ }
Disable or enable an alert
No description available

Authorizations:
apiKeyAuth
path Parameters
id
required
string <UUIDv4>
The alert definition ID

query Parameters
active
required
boolean
Whether to enable or disable the alert definition

Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v3/alert-defs/{id}:setActive
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v3/alert-defs/%7Bid%7D:setActive?active=SOME_BOOLEAN_VALUE';

let options = {method: 'POST', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
{ }
Download alerts
Download a list of all accessible alert definitions in base64-encoded byte format.

Requires the following permissions:

alerts:ReadConfig
Authorizations:
apiKeyAuth
Responses
200 A successful response.(streaming responses)
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v3/alerts/download
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v3/alerts/download';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"result": {
"content": "SGVsbG8gV29ybGQ="
},
"error": {
"code": 0,
"message": "string",
"details": []
}
}
Alert events service
Get information regarding your alert events - instances of alerts being triggered.

Learn more about alert events and incidents in our documentation.
Get alert events statistics
No description available

Authorizations:
apiKeyAuth
query Parameters
ids	
Array of strings
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v3/alert-event-stats
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v3/alert-event-stats?ids=SOME_ARRAY_VALUE';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"eventsStats": {
"property1": {},
"property2": {}
}
}
Get alert event by ID
No description available

Authorizations:
apiKeyAuth
path Parameters
id
required
string
Alert event ID

query Parameters
pagination.pageSize	
integer <int64>
pagination.pageToken	
string
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v3/alert-event/{id}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v3/alert-event/%7Bid%7D?pagination.pageSize=SOME_INTEGER_VALUE&pagination.pageToken=SOME_STRING_VALUE';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"id": "string",
"singlePermutation": {
"permutationLabels": {},
"groupLabels": {},
"timestamp": "2019-08-24T14:15:22Z",
"alertId": "string",
"status": "ALERT_STATUS_RESOLVED_OR_UNSPECIFIED",
"preGroupingEventId": "string",
"payload": { },
"payloadType": "string",
"permutationId": "string",
"incidentCorrelationKey": "string",
"activityAnalysis": {}
},
"multiplePermutation": {
"alertEventMultiplePermutation": []
},
"pagination": {
"totalSize": 0,
"nextPageToken": "string"
}
}
Recording Rules Service
A service to manage recording rules.

List Recording Rules
No description available

Authorizations:
apiKeyAuth
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v1/rule-group-sets
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"sets": [
{}
]
}
Create Recording Rules
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
A set of rule groups to create.

groups	
Array of objects (In Rule Group)
name	
string
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/rule-group-sets
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"groups": [
{}
],
"name": "string"
}
Response samples
200400401500default
Content type
application/json

Copy
{
"id": "string"
}
Get Recording Rules
No description available

Authorizations:
apiKeyAuth
path Parameters
id
required
string
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v1/rule-group-sets/{id}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets/%7Bid%7D';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"id": "string",
"groups": [
{}
],
"name": "string"
}
Delete Recording Rules
No description available

Authorizations:
apiKeyAuth
path Parameters
id
required
string
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

delete
/v1/rule-group-sets/{id}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/rule-group-sets/%7Bid%7D';

let options = {method: 'DELETE', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
{ }
Update Recording Rules
No description available

Authorizations:
apiKeyAuth
path Parameters
id
required
string
Request Body schema: application/json
required
groups	
Array of objects (In Rule Group)
name	
string
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

put
/v1/rule-group-sets/{id}
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"groups": [
{}
],
"name": "string"
}
Response samples
200400401500default
Content type
application/json

Copy
{ }
Dashboard service
Manage your dashboards.

Get dashboard catalog
Get a list of all dashboards accessible.

Requires the following permissions:

team-dashboards:Read
Authorizations:
apiKeyAuth
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v1/dashboards/catalog
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/dashboards/catalog';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"items": [
{}
]
}
Create a new dashboard
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
This is a request used to create a new custom dashboard

requestId
required
string
dashboard
required
object (Dashboard)
Dashboard represents the structure and configuration of a Coralogix Custom Dashboard.

Learn more about Custom Dashboards in our documentation.
isLocked	
boolean
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/dashboards/dashboards
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"requestId": "string",
"dashboard": {
"id": "GZLHSeqelCbD3I7HbIDtL",
"name": "Example Name",
"description": "Sample description",
"layout": {},
"variables": [],
"filters": [],
"absoluteTimeFrame": {},
"relativeTimeFrame": "string",
"folderId": {},
"folderPath": {},
"annotations": [],
"off": { },
"twoMinutes": { },
"fiveMinutes": { }
},
"isLocked": true
}
Response samples
200400401500default
Content type
application/json

Copy
{
"dashboardId": "string"
}
Replace a dashboard
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
This is a request sent to update an existing dashboard with new information

requestId
required
string
dashboard
required
object (Dashboard)
Dashboard represents the structure and configuration of a Coralogix Custom Dashboard.

Learn more about Custom Dashboards in our documentation.
isLocked	
boolean
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

put
/v1/dashboards/dashboards
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"requestId": "string",
"dashboard": {
"id": "GZLHSeqelCbD3I7HbIDtL",
"name": "Example Name",
"description": "Sample description",
"layout": {},
"variables": [],
"filters": [],
"absoluteTimeFrame": {},
"relativeTimeFrame": "string",
"folderId": {},
"folderPath": {},
"annotations": [],
"off": { },
"twoMinutes": { },
"fiveMinutes": { }
},
"isLocked": true
}
Response samples
200400401500default
Content type
application/json

Copy
{ }
Get a dashboard
No description available

Authorizations:
apiKeyAuth
path Parameters
dashboardId
required
string
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v1/dashboards/dashboards/{dashboardId}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7BdashboardId%7D';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"dashboard": {
"id": "GZLHSeqelCbD3I7HbIDtL",
"name": "Example Name",
"description": "Sample description",
"layout": {},
"variables": [],
"filters": [],
"absoluteTimeFrame": {},
"relativeTimeFrame": "string",
"folderId": {},
"folderPath": {},
"annotations": [],
"off": { },
"twoMinutes": { },
"fiveMinutes": { }
},
"updatedAt": "2019-08-24T14:15:22Z",
"createdAt": "2019-08-24T14:15:22Z",
"updaterAuthorId": "string",
"updaterName": "string",
"authorId": "string",
"authorName": "string",
"updatedOriginType": "TOKEN_ORIGIN_TYPE_UNSPECIFIED",
"createdOriginType": "TOKEN_ORIGIN_TYPE_UNSPECIFIED",
"isLocked": true,
"lockerAuthorId": "string",
"lockerName": "string"
}
Delete a dashboard
No description available

Authorizations:
apiKeyAuth
path Parameters
dashboardId
required
string
query Parameters
requestId
required
string
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

delete
/v1/dashboards/dashboards/{dashboardId}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/dashboards/dashboards/%7BdashboardId%7D?requestId=SOME_STRING_VALUE';

let options = {method: 'DELETE', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
{ }
Replace the default dashboard
No description available

Authorizations:
apiKeyAuth
path Parameters
dashboardId
required
string
Request Body schema: application/json
required
requestId
required
string
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

put
/v1/dashboards/dashboards/{dashboardId}/default
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
{
"requestId": "string"
}
Response samples
200400401500default
Content type
application/json

Copy
{ }
Assign a dashboard to a folder
No description available

Authorizations:
apiKeyAuth
path Parameters
dashboardId
required
string
Request Body schema: application/json
required
requestId
required
string
folderId	
string (could be null to assign the dashboard to root)
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/dashboards/dashboards/{dashboardId}/folder
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
{
"requestId": "string",
"folderId": "string"
}
Response samples
200400401500default
Content type
application/json

Copy
{ }
Add dashboard to favorites
No description available

Authorizations:
apiKeyAuth
path Parameters
dashboardId
required
string
Request Body schema: application/json
required
requestId
required
string
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

patch
/v1/dashboards/dashboards/{dashboardId}:pin
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
{
"requestId": "string"
}
Response samples
200400401500default
Content type
application/json

Copy
{ }
Remove dashboard from favorites
No description available

Authorizations:
apiKeyAuth
path Parameters
dashboardId
required
string
Request Body schema: application/json
required
requestId
required
string
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

patch
/v1/dashboards/dashboards/{dashboardId}:unpin
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
{
"requestId": "string"
}
Response samples
200400401500default
Content type
application/json

Copy
{ }
Dashboard folders service
Manage your dashboard folders.

List dashboard folders
List all dashboard folders accessible.

Requires the following permissions:

team-dashboards:Read
Authorizations:
apiKeyAuth
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v1/dashboards/folders
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/dashboards/folders';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"folder": [
{}
]
}
Create a dashboard folder
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
requestId	
string
folder	
object (commonDashboardFolder)
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/dashboards/folders
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"requestId": "string",
"folder": {
"id": "string",
"name": "string",
"parentId": "string"
}
}
Response samples
200400401500default
Content type
application/json

Copy
{ }
Replace a dashboard folder
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
requestId	
string
folder	
object (commonDashboardFolder)
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

put
/v1/dashboards/folders
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"requestId": "string",
"folder": {
"id": "string",
"name": "string",
"parentId": "string"
}
}
Response samples
200400401500default
Content type
application/json

Copy
{ }
Get a dashboard folder
Returns a dashboard folder data.

Requires the following permissions:

team-dashboards:Read
Authorizations:
apiKeyAuth
path Parameters
folderId
required
string
query Parameters
requestId	
string
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v1/dashboards/folders/{folderId}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/dashboards/folders/%7BfolderId%7D?requestId=SOME_STRING_VALUE';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"folder": {
"id": "string",
"name": "string",
"parentId": "string"
}
}
Delete a dashboard folder
No description available

Authorizations:
apiKeyAuth
path Parameters
folderId
required
string
query Parameters
requestId	
string
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

delete
/v1/dashboards/folders/{folderId}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/dashboards/folders/%7BfolderId%7D?requestId=SOME_STRING_VALUE';

let options = {method: 'DELETE', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
{ }
Actions Service
A service for managing actions.

List Actions
No description available

Authorizations:
apiKeyAuth
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v2/actions
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v2/actions';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"actions": [
{}
]
}
Create Action
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
name	
string
url	
string
isPrivate	
boolean
sourceType	
string (actionsv2SourceType)
Default: "SOURCE_TYPE_UNSPECIFIED"
Enum: "SOURCE_TYPE_UNSPECIFIED" "SOURCE_TYPE_LOG" "SOURCE_TYPE_DATA_MAP"
applicationNames	
Array of strings
subsystemNames	
Array of strings
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v2/actions
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"name": "string",
"url": "string",
"isPrivate": true,
"sourceType": "SOURCE_TYPE_UNSPECIFIED",
"applicationNames": [
"string"
],
"subsystemNames": [
"string"
]
}
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"action": {
"id": "string",
"name": "string",
"url": "string",
"isHidden": true,
"isPrivate": true,
"sourceType": "SOURCE_TYPE_UNSPECIFIED",
"applicationNames": [],
"subsystemNames": [],
"createdBy": "string"
}
}
Replace Action
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
action	
object (actionsv2Action)
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

put
/v2/actions
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"action": {
"id": "string",
"name": "string",
"url": "string",
"isHidden": true,
"isPrivate": true,
"sourceType": "SOURCE_TYPE_UNSPECIFIED",
"applicationNames": [],
"subsystemNames": [],
"createdBy": "string"
}
}
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"action": {
"id": "string",
"name": "string",
"url": "string",
"isHidden": true,
"isPrivate": true,
"sourceType": "SOURCE_TYPE_UNSPECIFIED",
"applicationNames": [],
"subsystemNames": [],
"createdBy": "string"
}
}
Atomic Batch Execute Actions
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
requests	
Array of objects (v2ActionExecutionRequest)
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v2/actions/actions:atomicBatchExecute
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"requests": [
{}
]
}
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"matchingResponses": [
{}
]
}
Order Actions
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
privateActionsOrder	
object
sharedActionsOrder	
object
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v2/actions/actions:order
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"privateActionsOrder": {
"property1": 0,
"property2": 0
},
"sharedActionsOrder": {
"property1": 0,
"property2": 0
}
}
Response samples
200400401500default
Content type
application/json

Copy
{ }
Get Action
No description available

Authorizations:
apiKeyAuth
path Parameters
id
required
string
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v2/actions/{id}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v2/actions/%7Bid%7D';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"action": {
"id": "string",
"name": "string",
"url": "string",
"isHidden": true,
"isPrivate": true,
"sourceType": "SOURCE_TYPE_UNSPECIFIED",
"applicationNames": [],
"subsystemNames": [],
"createdBy": "string"
}
}
Delete Action
No description available

Authorizations:
apiKeyAuth
path Parameters
id
required
string
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

delete
/v2/actions/{id}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v2/actions/%7Bid%7D';

let options = {method: 'DELETE', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
{ }
Slos Service
A service for managing Service Level Objectives (SLOs).

List Slos
No description available

Authorizations:
apiKeyAuth
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v1/slo/slos
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/slo/slos';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"slos": [
{}
]
}
Create Slo
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
id	
string
name
required
string
description	
string
creator	
string
labels	
object
revision	
object (Revision)
The revision of the slo, used to differentiate between different versions of the same SLO

grouping	
object (Grouping)
Definition of the SLO grouping fields

createTime	
string <date-time>
updateTime	
string <date-time>
targetThresholdPercentage
required
number <float>
sloTimeFrame	
string (v1SloTimeFrame)
Default: "SLO_TIME_FRAME_UNSPECIFIED"
Enum: "SLO_TIME_FRAME_UNSPECIFIED" "SLO_TIME_FRAME_7_DAYS" "SLO_TIME_FRAME_14_DAYS" "SLO_TIME_FRAME_21_DAYS" "SLO_TIME_FRAME_28_DAYS"
requestBasedMetricSli	
object (RequestBasedMetricSli)
Definition of a request-based SLI based on metrics

windowBasedMetricSli	
object (WindowBasedMetricSli)
Definition of a window-based SLI based on metrics

Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/slo/slos
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"id": "b11919d5-ef85-4bb1-8655-02640dbe94d9",
"name": "Example Slo Name",
"description": "A brief description of my SLO",
"creator": "test@domain.com",
"labels": {
"property1": "string",
"property2": "string"
},
"revision": {
"revision": 1,
"updateTime": "2019-08-24T14:15:22Z"
},
"grouping": {
"labels": []
},
"createTime": "2019-08-24T14:15:22Z",
"updateTime": "2019-08-24T14:15:22Z",
"targetThresholdPercentage": 99.999,
"sloTimeFrame": "SLO_TIME_FRAME_UNSPECIFIED",
"requestBasedMetricSli": {
"goodEvents": {},
"totalEvents": {}
},
"windowBasedMetricSli": {
"query": {},
"window": "WINDOW_SLO_WINDOW_UNSPECIFIED",
"comparisonOperator": "COMPARISON_OPERATOR_UNSPECIFIED",
"threshold": 0.95
}
}
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"slo": {
"id": "b11919d5-ef85-4bb1-8655-02640dbe94d9",
"name": "Example Slo Name",
"description": "A brief description of my SLO",
"creator": "test@domain.com",
"labels": {},
"revision": {},
"grouping": {},
"createTime": "2019-08-24T14:15:22Z",
"updateTime": "2019-08-24T14:15:22Z",
"targetThresholdPercentage": 99.999,
"sloTimeFrame": "SLO_TIME_FRAME_UNSPECIFIED",
"requestBasedMetricSli": {},
"windowBasedMetricSli": {}
}
}
Replace Slo
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
id	
string
name
required
string
description	
string
creator	
string
labels	
object
revision	
object (Revision)
The revision of the slo, used to differentiate between different versions of the same SLO

grouping	
object (Grouping)
Definition of the SLO grouping fields

createTime	
string <date-time>
updateTime	
string <date-time>
targetThresholdPercentage
required
number <float>
sloTimeFrame	
string (v1SloTimeFrame)
Default: "SLO_TIME_FRAME_UNSPECIFIED"
Enum: "SLO_TIME_FRAME_UNSPECIFIED" "SLO_TIME_FRAME_7_DAYS" "SLO_TIME_FRAME_14_DAYS" "SLO_TIME_FRAME_21_DAYS" "SLO_TIME_FRAME_28_DAYS"
requestBasedMetricSli	
object (RequestBasedMetricSli)
Definition of a request-based SLI based on metrics

windowBasedMetricSli	
object (WindowBasedMetricSli)
Definition of a window-based SLI based on metrics

Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

put
/v1/slo/slos
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"id": "b11919d5-ef85-4bb1-8655-02640dbe94d9",
"name": "Example Slo Name",
"description": "A brief description of my SLO",
"creator": "test@domain.com",
"labels": {
"property1": "string",
"property2": "string"
},
"revision": {
"revision": 1,
"updateTime": "2019-08-24T14:15:22Z"
},
"grouping": {
"labels": []
},
"createTime": "2019-08-24T14:15:22Z",
"updateTime": "2019-08-24T14:15:22Z",
"targetThresholdPercentage": 99.999,
"sloTimeFrame": "SLO_TIME_FRAME_UNSPECIFIED",
"requestBasedMetricSli": {
"goodEvents": {},
"totalEvents": {}
},
"windowBasedMetricSli": {
"query": {},
"window": "WINDOW_SLO_WINDOW_UNSPECIFIED",
"comparisonOperator": "COMPARISON_OPERATOR_UNSPECIFIED",
"threshold": 0.95
}
}
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"slo": {
"id": "b11919d5-ef85-4bb1-8655-02640dbe94d9",
"name": "Example Slo Name",
"description": "A brief description of my SLO",
"creator": "test@domain.com",
"labels": {},
"revision": {},
"grouping": {},
"createTime": "2019-08-24T14:15:22Z",
"updateTime": "2019-08-24T14:15:22Z",
"targetThresholdPercentage": 99.999,
"sloTimeFrame": "SLO_TIME_FRAME_UNSPECIFIED",
"requestBasedMetricSli": {},
"windowBasedMetricSli": {}
},
"effectedSloAlertIds": [
"string"
]
}
Get Slo
No description available

Authorizations:
apiKeyAuth
path Parameters
id
required
string
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v1/slo/slos/{id}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/slo/slos/%7Bid%7D';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"slo": {
"id": "b11919d5-ef85-4bb1-8655-02640dbe94d9",
"name": "Example Slo Name",
"description": "A brief description of my SLO",
"creator": "test@domain.com",
"labels": {},
"revision": {},
"grouping": {},
"createTime": "2019-08-24T14:15:22Z",
"updateTime": "2019-08-24T14:15:22Z",
"targetThresholdPercentage": 99.999,
"sloTimeFrame": "SLO_TIME_FRAME_UNSPECIFIED",
"requestBasedMetricSli": {},
"windowBasedMetricSli": {}
}
}
Delete Slo
No description available

Authorizations:
apiKeyAuth
path Parameters
id
required
string
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

delete
/v1/slo/slos/{id}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/slo/slos/%7Bid%7D';

let options = {method: 'DELETE', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"effectedSloAlertIds": [
"string"
]
}
Batch Execute Slo
No description available

Authorizations:
apiKeyAuth
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/slo/slos:batchExecute
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/slo/slos:batchExecute';

let options = {method: 'POST', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"matchingResponses": [
{}
],
"status": {
"statusCode": "OK",
"message": "string",
"details": {}
}
}
Batch Get Slo
No description available

Authorizations:
apiKeyAuth
query Parameters
ids
required
Array of strings
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v1/slo/slos:batchGet
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/slo/slos:batchGet?ids=SOME_ARRAY_VALUE';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"slos": [
{}
],
"notFoundIds": [
"string"
]
}
Events2Metrics Service
Manage your events2metrics.

List E2Ms
No description available

Authorizations:
apiKeyAuth
Responses
200 A successful response.
default An unexpected error response.

get
/api/v2/events2metrics
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"e2m": [
{}
]
}
Create a new E2M
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
name
required
string (Name of E2M to create)
description	
string (Description of E2M to create)
permutationsLimit	
integer <int32> (The permutation limit of the E2M)
metricLabels	
Array of objects (E2M metric labels)
metricFields	
Array of objects (E2M metric fields)
type	
string (Enum defining e2m type)
Default: "E2M_TYPE_UNSPECIFIED"
Enum: "E2M_TYPE_UNSPECIFIED" "E2M_TYPE_LOGS2METRICS" "E2M_TYPE_SPANS2METRICS"
spansQuery	
object (SpansQuery)
This data structure represents a query for spans.

Find out more about events2metrics
logsQuery	
object (SpansQuery)
This data structure represents a query for logs.

Find out more about events2metrics
Responses
200 A successful response.
default An unexpected error response.

post
/api/v2/events2metrics
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"name": "Service catalog latency",
"description": "avg and max the latency of catalog service",
"permutationsLimit": 30000,
"metricLabels": [
{}
],
"metricFields": [
{}
],
"type": "E2M_TYPE_UNSPECIFIED",
"spansQuery": {
"lucene": "applicationName:myApp",
"applicationnameFilters": "myApp",
"subsystemnameFilters": "mySubsystem",
"actionFilters": "myAction",
"serviceFilters": "myService"
},
"logsQuery": {
"lucene": "log_obj.numeric_field: [50 TO 100]",
"alias": "new_query",
"applicationnameFilters": "app_name",
"subsystemnameFilters": "sub_name",
"severityFilters": []
}
}
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"e2m": {
"id": "d6a3658e-78d2-47d0-9b81-b2c551f01b09",
"name": "Service_catalog_latency",
"description": "avg and max the latency of catalog service",
"createTime": "2022-06-30T12:30:00Z'",
"updateTime": "2022-06-30T12:30:00Z'",
"permutations": {},
"metricLabels": [],
"metricFields": [],
"type": "E2M_TYPE_UNSPECIFIED",
"spansQuery": {},
"logsQuery": {},
"isInternal": true
}
}
Replace an E2M
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
id	
string <uuid> (E2M unique ID, required on update requests) = 36 characters ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]...Show pattern
name
required
string (Name of the E2M)
description	
string (Description of the E2M)
createTime	
string (E2M create time)
updateTime	
string (E2M update time)
permutations	
object (E2M Permutations)
This data structure represents the limit of events2metrics permutations and if the limit was exceeded

Find out more about events2metrics
metricLabels	
Array of objects (E2M metric labels)
metricFields	
Array of objects (E2M metric fields) <= 10 items
type
required
string (Enum defining e2m type)
Default: "E2M_TYPE_UNSPECIFIED"
Enum: "E2M_TYPE_UNSPECIFIED" "E2M_TYPE_LOGS2METRICS" "E2M_TYPE_SPANS2METRICS"
spansQuery	
object (SpansQuery)
This data structure represents a query for spans.

Find out more about events2metrics
logsQuery	
object (SpansQuery)
This data structure represents a query for logs.

Find out more about events2metrics
isInternal	
boolean (A flag that represents if the e2m is for internal usage)
Responses
200 A successful response.
default An unexpected error response.

put
/api/v2/events2metrics
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"id": "d6a3658e-78d2-47d0-9b81-b2c551f01b09",
"name": "Service_catalog_latency",
"description": "avg and max the latency of catalog service",
"createTime": "2022-06-30T12:30:00Z'",
"updateTime": "2022-06-30T12:30:00Z'",
"permutations": {
"limit": 30000,
"hasExceededLimit": true
},
"metricLabels": [
{}
],
"metricFields": [
{}
],
"type": "E2M_TYPE_UNSPECIFIED",
"spansQuery": {
"lucene": "applicationName:myApp",
"applicationnameFilters": "myApp",
"subsystemnameFilters": "mySubsystem",
"actionFilters": "myAction",
"serviceFilters": "myService"
},
"logsQuery": {
"lucene": "log_obj.numeric_field: [50 TO 100]",
"alias": "new_query",
"applicationnameFilters": "app_name",
"subsystemnameFilters": "sub_name",
"severityFilters": []
},
"isInternal": true
}
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"e2m": {
"id": "d6a3658e-78d2-47d0-9b81-b2c551f01b09",
"name": "Service_catalog_latency",
"description": "avg and max the latency of catalog service",
"createTime": "2022-06-30T12:30:00Z'",
"updateTime": "2022-06-30T12:30:00Z'",
"permutations": {},
"metricLabels": [],
"metricFields": [],
"type": "E2M_TYPE_UNSPECIFIED",
"spansQuery": {},
"logsQuery": {},
"isInternal": true
}
}
Atomic Batch Execute E2M
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
requests	
Array of objects (represents one of e2m actions create/replace/delete)
Responses
200 A successful response.
default An unexpected error response.

post
/api/v2/events2metrics/atomic_batch_execute
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"requests": [
{}
]
}
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"matchingResponses": [
{}
]
}
List E2M Labels Cardinality
No description available

Authorizations:
apiKeyAuth
query Parameters
spansQuery.lucene	
string
lucene query

spansQuery.applicationnameFilters	
Array of strings
application name filters

spansQuery.subsystemnameFilters	
Array of strings
subsystem name filters

spansQuery.actionFilters	
Array of strings
action filters

spansQuery.serviceFilters	
Array of strings
service filters

logsQuery.lucene	
string
lucene query

logsQuery.alias	
string
alias

logsQuery.applicationnameFilters	
Array of strings
application name filters

logsQuery.subsystemnameFilters	
Array of strings
subsystem names filters

logsQuery.severityFilters	
Array of strings
Items Enum: "SEVERITY_UNSPECIFIED" "SEVERITY_DEBUG" "SEVERITY_VERBOSE" "SEVERITY_INFO" "SEVERITY_WARNING" "SEVERITY_ERROR" "SEVERITY_CRITICAL"
severity type filters

Responses
200 A successful response.
default An unexpected error response.

get
/api/v2/events2metrics/labels_cardinality
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics/labels_cardinality?spansQuery.lucene=SOME_STRING_VALUE&spansQuery.applicationnameFilters=SOME_ARRAY_VALUE&spansQuery.subsystemnameFilters=SOME_ARRAY_VALUE&spansQuery.actionFilters=SOME_ARRAY_VALUE&spansQuery.serviceFilters=SOME_ARRAY_VALUE&logsQuery.lucene=SOME_STRING_VALUE&logsQuery.alias=SOME_STRING_VALUE&logsQuery.applicationnameFilters=SOME_ARRAY_VALUE&logsQuery.subsystemnameFilters=SOME_ARRAY_VALUE&logsQuery.severityFilters=SOME_ARRAY_VALUE';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"permutations": [
{}
]
}
Get E2M Limits
No description available

Authorizations:
apiKeyAuth
Responses
200 A successful response.
default An unexpected error response.

get
/api/v2/events2metrics/limits
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics/limits';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"companyId": "string",
"labelsLimit": 0,
"permutationsLimit": {
"limit": 0,
"used": 0
},
"metricsLimit": {
"limit": 0,
"used": 0
}
}
Get an E2M
No description available

Authorizations:
apiKeyAuth
path Parameters
id
required
string
Responses
200 A successful response.
default An unexpected error response.

get
/api/v2/events2metrics/{id}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics/%7Bid%7D';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"e2m": {
"id": "d6a3658e-78d2-47d0-9b81-b2c551f01b09",
"name": "Service_catalog_latency",
"description": "avg and max the latency of catalog service",
"createTime": "2022-06-30T12:30:00Z'",
"updateTime": "2022-06-30T12:30:00Z'",
"permutations": {},
"metricLabels": [],
"metricFields": [],
"type": "E2M_TYPE_UNSPECIFIED",
"spansQuery": {},
"logsQuery": {},
"isInternal": true
}
}
Delete an E2M
No description available

Authorizations:
apiKeyAuth
path Parameters
id
required
string
id of e2m to be deleted

Responses
200 A successful response.
default An unexpected error response.

delete
/api/v2/events2metrics/{id}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/api/v2/events2metrics/%7Bid%7D';

let options = {method: 'DELETE', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200default
Content type
application/json

Copy
{
"id": "string"
}
Events Service
A service for querying events.

Learn more about alerts in our documentation
List Events
No description available

Authorizations:
apiKeyAuth
query Parameters
filter.timestamp.from
required
string <date-time>
filter.timestamp.to
required
string <date-time>
filter.cxEventTypes
required
Array of strings
filter.cxEventKeys
required
Array of strings
filter.cxEventMetadataFilters.operator	
string
Default: "FILTER_OPERATOR_AND_OR_UNSPECIFIED"
Enum: "FILTER_OPERATOR_AND_OR_UNSPECIFIED" "FILTER_OPERATOR_OR"
pagination.pageSize	
integer <int64>
pagination.pageToken	
string
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v3/events
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v3/events?filter.timestamp.from=SOME_STRING_VALUE&filter.timestamp.to=SOME_STRING_VALUE&filter.cxEventTypes=SOME_ARRAY_VALUE&filter.cxEventKeys=SOME_ARRAY_VALUE&filter.cxEventMetadataFilters.operator=SOME_STRING_VALUE&pagination.pageSize=SOME_INTEGER_VALUE&pagination.pageToken=SOME_STRING_VALUE';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"events": [
{}
],
"pagination": {
"totalSize": 10,
"nextPageToken": "test"
}
}
Batch Get Event
No description available

Authorizations:
apiKeyAuth
query Parameters
ids	
Array of strings
pagination.pageSize	
integer <int64>
pagination.pageToken	
string
filter.timestamp.from
required
string <date-time>
filter.timestamp.to
required
string <date-time>
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v3/events/events:batchGet
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v3/events/events:batchGet?ids=SOME_ARRAY_VALUE&pagination.pageSize=SOME_INTEGER_VALUE&pagination.pageToken=SOME_STRING_VALUE&filter.timestamp.from=SOME_STRING_VALUE&filter.timestamp.to=SOME_STRING_VALUE';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"events": {
"property1": {},
"property2": {}
},
"notFoundIds": [
"string"
],
"pagination": {
"totalSize": 10,
"nextPageToken": "test"
}
}
Get Event
No description available

Authorizations:
apiKeyAuth
path Parameters
id
required
string
query Parameters
pagination.pageSize	
integer <int64>
pagination.pageToken	
string
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v3/events/{id}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v3/events/%7Bid%7D?pagination.pageSize=SOME_INTEGER_VALUE&pagination.pageToken=SOME_STRING_VALUE';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"event": {
"singleEvent": {},
"multipleEvents": {}
},
"pagination": {
"totalSize": 10,
"nextPageToken": "test"
}
}
List Events Count
No description available

Authorizations:
apiKeyAuth
query Parameters
filter.timestamp.from
required
string <date-time>
filter.timestamp.to
required
string <date-time>
filter.cxEventTypes
required
Array of strings
filter.cxEventKeys
required
Array of strings
filter.cxEventMetadataFilters.operator	
string
Default: "FILTER_OPERATOR_AND_OR_UNSPECIFIED"
Enum: "FILTER_OPERATOR_AND_OR_UNSPECIFIED" "FILTER_OPERATOR_OR"
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v3/events:count
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v3/events:count?filter.timestamp.from=SOME_STRING_VALUE&filter.timestamp.to=SOME_STRING_VALUE&filter.cxEventTypes=SOME_ARRAY_VALUE&filter.cxEventKeys=SOME_ARRAY_VALUE&filter.cxEventMetadataFilters.operator=SOME_STRING_VALUE';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
{
"count": 10,
"reachedLimit": false
}
Get Events Statistics
No description available

Authorizations:
apiKeyAuth
query Parameters
filter.timestamp.from
required
string <date-time>
filter.timestamp.to
required
string <date-time>
filter.cxEventTypes
required
Array of strings
filter.cxEventKeys
required
Array of strings
filter.cxEventMetadataFilters.operator	
string
Default: "FILTER_OPERATOR_AND_OR_UNSPECIFIED"
Enum: "FILTER_OPERATOR_AND_OR_UNSPECIFIED" "FILTER_OPERATOR_OR"
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v3/events:statistics
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v3/events:statistics?filter.timestamp.from=SOME_STRING_VALUE&filter.timestamp.to=SOME_STRING_VALUE&filter.cxEventTypes=SOME_ARRAY_VALUE&filter.cxEventKeys=SOME_ARRAY_VALUE&filter.cxEventMetadataFilters.operator=SOME_STRING_VALUE';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"cxEventMetadataFieldStatistics": {
"property1": {},
"property2": {}
}
}
Folders for views
Create and manage view folders.

List view folders
List view's folders

Authorizations:
apiKeyAuth
Responses
200 A successful response.
default An unexpected error response.

get
/v1/view_folders
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/view_folders';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"view_folders": [
{}
]
}
Create View Folder
Create view folder

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
Create view folder.

name	
string (View folder name) non-empty
Folder name

Responses
200 View folder
default An unexpected error response.

post
/v1/view_folders
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
{
"name": "My Folder"
}
Response samples
200default
Content type
application/json

Copy
{
"id": "0cd4ed54-9b59-4eef-b329-151a167e2304",
"name": "My Folder"
}
Replace View Folder
Replaces an existing view folder

Authorizations:
apiKeyAuth
path Parameters
folder.id
required
string <uuid>
Unique identifier for folders

Request Body schema: application/json
required
View folder

name
required
string non-empty
Folder name

Responses
200 View folder
default An unexpected error response.

put
/v1/view_folders/{folder.id}
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
{
"name": "My Folder"
}
Response samples
200default
Content type
application/json

Copy
{
"id": "0cd4ed54-9b59-4eef-b329-151a167e2304",
"name": "My Folder"
}
Get View Folder
Create view folder

Authorizations:
apiKeyAuth
path Parameters
id
required
string <uuid>
Unique identifier for folders

Responses
200
default An unexpected error response.

get
/v1/view_folders/{id}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/view_folders/%7Bid%7D';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200default
Content type
application/json

Copy
{
"id": "0cd4ed54-9b59-4eef-b329-151a167e2304",
"name": "My Folder"
}
Delete View Folder
Deletes a view folder by ID

Authorizations:
apiKeyAuth
path Parameters
id
required
string <uuid>
Unique identifier for folders

Responses
200 A successful response.
default An unexpected error response.

delete
/v1/view_folders/{id}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/view_folders/%7Bid%7D';

let options = {method: 'DELETE', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200default
Content type
application/json

Copy
{ }
Views
Create and manage views.

List views
Lists all company public views

Authorizations:
apiKeyAuth
Responses
200 A successful response.
default An unexpected error response.

get
/v1/views
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/views';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"views": [
{}
]
}
Create a view
Creates a new view

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
View folder.

name
required
string non-empty
View name

searchQuery	
object (SearchQuery)
timeSelection
required
object (Time selection)
filters	
object (Selected filters)
folderId	
string <uuid> = 36 characters ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]...Show pattern
Unique identifier for folders

Responses
200 View
default An unexpected error response.

post
/v1/views
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"name": "Logs view",
"searchQuery": {
"query": "string"
},
"timeSelection": {
"quickSelection": {},
"customSelection": {}
},
"filters": {
"filters": []
},
"folderId": "3dc02998-0b50-4ea8-b68a-4779d716fa1f"
}
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"name": "Logs view",
"search_query": {
"query": "logs"
},
"time_selection": {
"custom_selection": {}
},
"filters": {
"filters": []
}
}
Get view
Gets a view by ID

Authorizations:
apiKeyAuth
path Parameters
id
required
integer <int32>
id

Responses
200 View
default An unexpected error response.

get
/v1/views/{id}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/views/%7Bid%7D';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"id": 52,
"name": "Logs view",
"search_query": {
"query": "logs"
},
"time_selection": {
"custom_selection": {}
},
"filters": {
"filters": []
}
}
Delete view
Deletes a view by ID

Authorizations:
apiKeyAuth
path Parameters
id
required
integer <int32>
id

Responses
200 A successful response.
default An unexpected error response.

delete
/v1/views/{id}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/views/%7Bid%7D';

let options = {method: 'DELETE', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200default
Content type
application/json

Copy
{ }
Replace a view
Replaces an existing view

Authorizations:
apiKeyAuth
path Parameters
view.id
required
integer <int32>
id

Request Body schema: application/json
required
View

name
required
string (View name) non-empty
View name

searchQuery	
object (SearchQuery)
timeSelection
required
object (Time selection)
filters	
object (Selected filters)
folderId	
string <uuid> = 36 characters ^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]...Show pattern
Unique identifier for folders

isCompactMode	
boolean
Responses
200 View
default An unexpected error response.

put
/v1/views/{view.id}
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"name": "Logs view",
"searchQuery": {
"query": "string"
},
"timeSelection": {
"quickSelection": {},
"customSelection": {}
},
"filters": {
"filters": []
},
"folderId": "3dc02998-0b50-4ea8-b68a-4779d716fa1f",
"isCompactMode": true
}
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"name": "Logs view",
"search_query": {
"query": "logs new"
},
"time_selection": {
"custom_selection": {}
},
"filters": {
"filters": []
}
}
Scopes Service
A service to manage scopes

Get Team Scopes By Ids
No description available

Authorizations:
apiKeyAuth
query Parameters
ids
required
Array of strings
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v1/scopes
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/scopes?ids=SOME_ARRAY_VALUE';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"scopes": [
{}
]
}
Create Scope
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
This data structure represents a request to create a scope

displayName
required
string
description	
string
filters
required
Array of objects (Filter)
defaultExpression	
string
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/scopes
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"displayName": "scope_name",
"description": "scope_description",
"filters": [
{}
],
"defaultExpression": "expression"
}
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"scope": {
"id": "scope_id",
"displayName": "scope_name",
"description": "scope_description",
"teamId": 1234,
"filters": [],
"defaultExpression": "expression"
}
}
Update Scope
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
This data structure represents a request to update a scope

id
required
string
displayName
required
string
description	
string
filters
required
Array of objects (Filter)
defaultExpression
required
string
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

put
/v1/scopes
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"id": "scope_id",
"displayName": "scope_name",
"description": "scope_description",
"filters": [
{}
],
"defaultExpression": "expression"
}
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"scope": {
"id": "scope_id",
"displayName": "scope_name",
"description": "scope_description",
"teamId": 1234,
"filters": [],
"defaultExpression": "expression"
}
}
Get Team Scopes
No description available

Authorizations:
apiKeyAuth
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v1/scopes/list
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/scopes/list';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"scopes": [
{}
]
}
Delete Scope
No description available

Authorizations:
apiKeyAuth
path Parameters
id
required
string
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

delete
/v1/scopes/{id}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/scopes/%7Bid%7D';

let options = {method: 'DELETE', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
{ }
Incidents service
Handle all operations related to incident management within Coralogix. Identify, manage, and resolve incidents efficiently through automated workflows and team collaboration.

Find out more about incident management in our documentation
List incidents with filters
Lists all available incidents based on specified filters and order. The list is ordered in an unspecified direction and sorted by creation time.

Requires the following permissions:

incidents:read
Authorizations:
apiKeyAuth
Request Body schema: application/json
required
Request to list incidents with filtering, pagination and ordering options

filter	
object (Incident query filter)
Filter configuration for incidents

pagination	
object (Pagination request)
Pagination parameters for list requests

orderBys	
Array of objects (Incident order by)
Order by fields

Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/incidents
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"filter": {
"assignee": [],
"status": [],
"state": [],
"severity": [],
"contextualLabels": {},
"startTime": "2019-08-24T14:15:22Z",
"endTime": "2019-08-24T14:15:22Z",
"searchQuery": {},
"applicationName": [],
"subsystemName": [],
"isMuted": true,
"createdAtRange": {},
"incidentDurationRange": {},
"metaLabels": [],
"metaLabelsOp": "FILTER_OPERATOR_OR_OR_UNSPECIFIED"
},
"pagination": {
"pageSize": 10,
"pageToken": "next_page_token"
},
"orderBys": [
{}
]
}
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"incidents": [
{}
],
"pagination": {
"totalSize": 100,
"nextPageToken": "next_page_token"
}
}
Get incident by ID
Retrieve detailed information about a single incident by its unique identifier.

Requires the following permissions:

incidents:read
Authorizations:
apiKeyAuth
path Parameters
id
required
string
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v1/incidents/{id}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/incidents/%7Bid%7D';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"incident": {
"id": "incident_id",
"name": "incident_name",
"state": "INCIDENT_STATE_UNSPECIFIED",
"status": "INCIDENT_STATUS_UNSPECIFIED",
"assignments": [],
"description": "incident_description",
"severity": "INCIDENT_SEVERITY_UNSPECIFIED",
"contextualLabels": {},
"displayLabels": {},
"events": [],
"createdAt": "2024-01-01T00:00:00.000Z",
"closedAt": "2024-01-01T00:00:00.000Z",
"lastStateUpdateTime": "2024-01-01T00:00:00.000Z",
"lastStateUpdateKey": "last_state_update_key",
"isMuted": false,
"metaLabels": [],
"duration": "string"
}
}
Get incident events
Retrieve a chronological list of all events associated with a specific incident. Includes state changes, assignments, acknowledgments, and resolutions.

Requires the following permissions:

incidents:read
Authorizations:
apiKeyAuth
path Parameters
incidentId
required
string
ID of the incident to retrieve events for

Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v1/incidents/{incidentId}/events
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/incidents/%7BincidentId%7D/events';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"incidentEvents": [
{}
]
}
Acknowledge incidents
Mark one or more incidents as acknowledged.

Requires the following permissions:

incidents:acknowledge
Authorizations:
apiKeyAuth
Request Body schema: application/json
required
Request to acknowledge one or more incidents

incidentIds
required
Array of strings
List of incident IDs to acknowledge

Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/incidents:acknowledge
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"incidentIds": [
"incident_id_1",
"incident_id_2"
]
}
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"incidents": [
{}
]
}
Assign incidents to a user
Assign one or more incidents to a specific user.

Requires the following permissions:

incidents:assign
Authorizations:
apiKeyAuth
Request Body schema: application/json
required
Request to assign one or more incidents to a user

incidentIds
required
Array of strings
List of incident IDs to assign

assignedTo
required
object (User details)
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/incidents:assign
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"incidentIds": [
"incident_id_1",
"incident_id_2"
],
"assignedTo": {
"userId": "user_id"
}
}
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"incidents": [
{}
]
}
Get multiple incidents by IDs
Retrieve multiple incidents by their IDs in a single request.

Requires the following permissions:

incidents:read
Authorizations:
apiKeyAuth
query Parameters
ids
required
Array of strings
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/incidents:batchGet
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/incidents:batchGet?ids=SOME_ARRAY_VALUE';

let options = {method: 'POST', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"incidents": {
"property1": {},
"property2": {}
},
"notFoundIds": [
"not_found_id_1",
"not_found_id_2"
]
}
Close incidents
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
Request to close one or more incidents

incidentIds
required
Array of strings
List of incident IDs to close

Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/incidents:close
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"incidentIds": [
"incident_id_1",
"incident_id_2"
]
}
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"incidents": [
{}
]
}
Get available filter values
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
Request to get available filter values for incidents

filter	
object (Incident query filter)
Filter configuration for incidents

Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/incidents:get-filter-values
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"filter": {
"assignee": [],
"status": [],
"state": [],
"severity": [],
"contextualLabels": {},
"startTime": "2019-08-24T14:15:22Z",
"endTime": "2019-08-24T14:15:22Z",
"searchQuery": {},
"applicationName": [],
"subsystemName": [],
"isMuted": true,
"createdAtRange": {},
"incidentDurationRange": {},
"metaLabels": [],
"metaLabelsOp": "FILTER_OPERATOR_OR_OR_UNSPECIFIED"
}
}
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"filtersValues": {
"assigneeWithCount": [],
"statusWithCount": [],
"stateWithCount": [],
"severityWithCount": [],
"contextualLabels": {},
"metaLabelsWithCount": [],
"metaLabelsOp": "FILTER_OPERATOR_OR_OR_UNSPECIFIED"
}
}
List incident events with filters
List incident events with support for filtering, pagination, and ordering.

Requires the following permissions:

incidents:read
Authorizations:
apiKeyAuth
Request Body schema: application/json
required
Request to list incident events with filtering, pagination and ordering options

filter	
object (Incident event query filter)
Filter configuration for incident events

pagination	
object (Pagination request)
Pagination parameters for list requests

orderBy	
object (List incident events order by request)
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/incidents:list-incident-events
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"filter": {
"status": [],
"severity": [],
"contextualLabels": {},
"name": "string",
"isMuted": true,
"timestamp": {},
"labels": {}
},
"pagination": {
"pageSize": 10,
"pageToken": "next_page_token"
},
"orderBy": {
"field": "INCIDENT_EVENT_ORDER_BY_FIELD_TYPE_TIMESTAMP_OR_UNSPECIFIED",
"direction": "ORDER_BY_DIRECTION_UNSPECIFIED"
}
}
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"items": [
{}
],
"pagination": {
"totalSize": 100,
"nextPageToken": "next_page_token"
}
}
Get available incident event filter values
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
A request to get available filter values for incident events

filter	
object (Incident event query filter)
Filter configuration for incident events

Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/incidents:list-incident-events-filter-values
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"filter": {
"status": [],
"severity": [],
"contextualLabels": {},
"name": "string",
"isMuted": true,
"timestamp": {},
"labels": {}
}
}
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"filtersValues": {
"assigneeWithCount": [],
"statusWithCount": [],
"stateWithCount": [],
"severityWithCount": [],
"contextualLabels": {},
"metaLabelsWithCount": [],
"metaLabelsOp": "FILTER_OPERATOR_OR_OR_UNSPECIFIED"
}
}
Get total count of incident events
Retrieve the total count of incident events matching a filter.

Requires the following permissions:

incidents:read
Authorizations:
apiKeyAuth
Request Body schema: application/json
required
A request to get the total count of incident events matching a filter

filter	
object (Incident event query filter)
Filter configuration for incident events

Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/incidents:list-incident-events-total-count
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"filter": {
"status": [],
"severity": [],
"contextualLabels": {},
"name": "string",
"isMuted": true,
"timestamp": {},
"labels": {}
}
}
Response samples
200400401500default
Content type
application/json

Copy
{
"count": 100,
"reachedLimit": false
}
Get incident aggregations
Retrieve aggregated incident data with support for grouping and filtering.

Requires the following permissions:

incidents:read
Authorizations:
apiKeyAuth
Request Body schema: application/json
required
Request to get aggregated incident data with filtering and grouping options

filter	
object (Incident query filter)
Filter configuration for incidents

groupBys	
Array of objects (Incident group by)
Group by fields for aggregation

pagination	
object (Pagination request)
Pagination parameters for list requests

Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/incidents:listIncidentAggregations
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"filter": {
"assignee": [],
"status": [],
"state": [],
"severity": [],
"contextualLabels": {},
"startTime": "2019-08-24T14:15:22Z",
"endTime": "2019-08-24T14:15:22Z",
"searchQuery": {},
"applicationName": [],
"subsystemName": [],
"isMuted": true,
"createdAtRange": {},
"incidentDurationRange": {},
"metaLabels": [],
"metaLabelsOp": "FILTER_OPERATOR_OR_OR_UNSPECIFIED"
},
"groupBys": [
{}
],
"pagination": {
"pageSize": 10,
"pageToken": "next_page_token"
}
}
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"incidentAggs": [
{}
],
"pagination": {
"totalSize": 100,
"nextPageToken": "next_page_token"
}
}
Resolve incidents
Mark one or more incidents as resolved.

Requires the following permissions:

incidents:close
Authorizations:
apiKeyAuth
Request Body schema: application/json
required
Request to resolve one or more incidents

incidentIds
required
Array of strings
List of incident IDs to resolve

Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/incidents:resolve
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"incidentIds": [
"incident_id_1",
"incident_id_2"
]
}
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"incidents": [
{}
]
}
Remove incident user assignments
Remove user assignments from one or more incidents.

Requires the following permissions:

incidents:assign
Authorizations:
apiKeyAuth
Request Body schema: application/json
required
Request to remove assignments from one or more incidents

incidentIds
required
Array of strings
List of incident IDs to unassign

Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/incidents:unassign
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"incidentIds": [
"incident_id_1",
"incident_id_2"
]
}
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"incidents": [
{}
]
}
MetricsTcoService
MetricsTcoService_Get
No description available

Authorizations:
apiKeyAuth
Responses
200 A successful response.
default An unexpected error response.

get
/metrics-tco
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/metrics-tco';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200default
Content type
application/json

Copy
{
"rules": 1
}
MetricsTcoService_Add
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
This data structure is used to add a metrics tco rule.

label
required
string
regex
required
string
Responses
200 A successful response.
default An unexpected error response.

post
/metrics-tco/add
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
{
"label": "rule1",
"regex": ".*"
}
Response samples
200default
Content type
application/json

Copy
{ }
MetricsTcoService_Delete
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
ruleId	
string <uint64>
Responses
200 A successful response.
default An unexpected error response.

post
/metrics-tco/delete
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
{
"ruleId": 1
}
Response samples
200default
Content type
application/json

Copy
{ }
MetricsConfiguratorPublicService
MetricsConfiguratorPublicService_GetTenantConfig
No description available

Authorizations:
apiKeyAuth
Responses
200 A successful response.
default An unexpected error response.

get
/v1/metrics-archive
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/metrics-archive';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"tenantConfig": {
"tenantId": 0,
"retentionPolicy": {},
"ibm": {},
"s3": {},
"prefix": "string",
"disabled": true
}
}
MetricsConfiguratorPublicService_ConfigureTenant
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
This data structure is used to configure a tenant.

retentionPolicy
required
object (Retenion Policy Request)
This data structure is used to set the retention policy for a tenant.

Find out more about metrics cost optimization
ibm	
object (IBM Bucket Configuration)
This data structure is used to configure an IBM bucket.

Find out more about metrics cost optimization
s3	
object (S3 Configuration)
This data structure represents the S3 configuration for a tenant.

Find out more about metrics cost optimization
Responses
200 A successful response.
default An unexpected error response.

post
/v1/metrics-archive
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"retentionPolicy": {
"rawResolution": 1,
"fiveMinutesResolution": 2,
"oneHourResolution": 3
},
"ibm": {
"endpoint": "s3.us-south.cloud-object-storage.appdomain.cloud",
"crn": "crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::",
"serviceCrn": "crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::"
},
"s3": {
"bucket": "string",
"region": "string"
}
}
Response samples
200default
Content type
application/json

Copy
{ }
MetricsConfiguratorPublicService_Update
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
This data structure is used to update the configuration of a tenant.

retentionDays
required
integer <int64>
ibm	
object (IBM Bucket Configuration)
This data structure is used to configure an IBM bucket.

Find out more about metrics cost optimization
s3	
object (S3 Configuration)
This data structure represents the S3 configuration for a tenant.

Find out more about metrics cost optimization
Responses
200 A successful response.
default An unexpected error response.

put
/v1/metrics-archive
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"retentionDays": 0,
"ibm": {
"endpoint": "s3.us-south.cloud-object-storage.appdomain.cloud",
"crn": "crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::",
"serviceCrn": "crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::"
},
"s3": {
"bucket": "string",
"region": "string"
}
}
Response samples
200default
Content type
application/json

Copy
{ }
MetricsConfiguratorPublicService_DisableArchive
No description available

Authorizations:
apiKeyAuth
Responses
200 A successful response.
default An unexpected error response.

post
/v1/metrics-archive:disable
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/metrics-archive:disable';

let options = {method: 'POST', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200default
Content type
application/json

Copy
{ }
MetricsConfiguratorPublicService_EnableArchive
No description available

Authorizations:
apiKeyAuth
Responses
200 A successful response.
default An unexpected error response.

post
/v1/metrics-archive:enable
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/metrics-archive:enable';

let options = {method: 'POST', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200default
Content type
application/json

Copy
{ }
MetricsConfiguratorPublicService_ValidateBucket
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
This data structure is used to validate a bucket.

ibm	
object (IBM Bucket Configuration)
This data structure is used to configure an IBM bucket.

Find out more about metrics cost optimization
s3	
object (S3 Configuration)
This data structure represents the S3 configuration for a tenant.

Find out more about metrics cost optimization
Responses
200 A successful response.
default An unexpected error response.

post
/v1/metrics-archive:validate
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"ibm": {
"endpoint": "s3.us-south.cloud-object-storage.appdomain.cloud",
"crn": "crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::",
"serviceCrn": "crn:v1:bluemix:public:cloud-object-storage:global:a/1234567890abcdef1234567890abcdef:12345678-1234-1234-1234-1234567890ab::"
},
"s3": {
"bucket": "string",
"region": "string"
}
}
Response samples
200default
Content type
application/json

Copy
{ }
Data Usage Service
A service to manage data usage metrics.

Get Data Usage
No description available

Authorizations:
apiKeyAuth
query Parameters
dateRange.fromDate	
string <date-time>
dateRange.toDate	
string <date-time>
resolution	
string
Aggregation resolution. Minimum supported value is 1h

Do note that to avoid overloading the service we enforce resolution limits that depend on the server configuration. This is configured by the server. This means that, for instance, requests with 1 hour resolution for an interval of 30 days will be rejected but accepted for 1 day interval.

Resolution must be between 1 hour and date_range interval

aggregate	
Array of strings
Items Enum: "AGGREGATE_BY_UNSPECIFIED" "AGGREGATE_BY_APPLICATION" "AGGREGATE_BY_SUBSYSTEM" "AGGREGATE_BY_PILLAR" "AGGREGATE_BY_PRIORITY"
List of aggregate parameters. i.e. if AggregateBy is [AGGREGATE_BY_PILLAR, AGGREGATE_BY_PRIORITY], then the response will stream data aggregated by pillar and priority.

Responses
200 A successful response.(streaming responses)
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v2/datausage
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v2/datausage?dateRange.fromDate=SOME_STRING_VALUE&dateRange.toDate=SOME_STRING_VALUE&resolution=SOME_STRING_VALUE&aggregate=SOME_ARRAY_VALUE';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"result": {
"entries": []
},
"error": {
"code": 0,
"message": "string",
"details": []
}
}
Get Daily Usage Evaluation Tokens
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
range	
string (datausagev2Range)
Default: "RANGE_UNSPECIFIED"
Enum: "RANGE_UNSPECIFIED" "RANGE_CURRENT_MONTH" "RANGE_LAST_30_DAYS" "RANGE_LAST_90_DAYS" "RANGE_LAST_WEEK"
dateRange	
object (Date Range)
This data structure represents a date range.

Find out more about data usage.
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v2/datausage/daily/evaluation_tokens
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"range": "RANGE_UNSPECIFIED",
"dateRange": {
"fromDate": "2021-01-01T00:00:00.000Z",
"toDate": "2021-01-01T00:00:00.000Z"
}
}
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"tokens": [
{}
]
}
Get Daily Usage Processed GBs
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
range	
string (datausagev2Range)
Default: "RANGE_UNSPECIFIED"
Enum: "RANGE_UNSPECIFIED" "RANGE_CURRENT_MONTH" "RANGE_LAST_30_DAYS" "RANGE_LAST_90_DAYS" "RANGE_LAST_WEEK"
dateRange	
object (Date Range)
This data structure represents a date range.

Find out more about data usage.
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v2/datausage/daily/processed_gbs
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"range": "RANGE_UNSPECIFIED",
"dateRange": {
"fromDate": "2021-01-01T00:00:00.000Z",
"toDate": "2021-01-01T00:00:00.000Z"
}
}
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"gbs": [
{}
]
}
Get Daily Usage Units
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
range	
string (datausagev2Range)
Default: "RANGE_UNSPECIFIED"
Enum: "RANGE_UNSPECIFIED" "RANGE_CURRENT_MONTH" "RANGE_LAST_30_DAYS" "RANGE_LAST_90_DAYS" "RANGE_LAST_WEEK"
dateRange	
object (Date Range)
This data structure represents a date range.

Find out more about data usage.
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v2/datausage/daily/units
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"range": "RANGE_UNSPECIFIED",
"dateRange": {
"fromDate": "2021-01-01T00:00:00.000Z",
"toDate": "2021-01-01T00:00:00.000Z"
}
}
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"units": [
{}
]
}
Get Data Usage Metrics Export Status
No description available

Authorizations:
apiKeyAuth
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v2/datausage/exportstatus
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v2/datausage/exportstatus';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
{
"enabled": true
}
Update Data Usage Metrics Export Status
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
This data structure is used to update data usage metrics export status.

enabled	
boolean
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v2/datausage/exportstatus
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
{
"enabled": true
}
Response samples
200400401500default
Content type
application/json

Copy
{
"enabled": true
}
Get Logs Count
No description available

Authorizations:
apiKeyAuth
query Parameters
dateRange.fromDate	
string <date-time>
dateRange.toDate	
string <date-time>
resolution	
string
Aggregation resolution with second precision.

Resolution must be between 1 second and date_range interval

filters.application	
Array of strings
filters.subsystem	
Array of strings
Responses
200 A successful response.(streaming responses)
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v2/datausage/logscount
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v2/datausage/logscount?dateRange.fromDate=SOME_STRING_VALUE&dateRange.toDate=SOME_STRING_VALUE&resolution=SOME_STRING_VALUE&filters.application=SOME_ARRAY_VALUE&filters.subsystem=SOME_ARRAY_VALUE';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"result": {
"logsCount": []
},
"error": {
"code": 0,
"message": "string",
"details": []
}
}
Get Spans Count
No description available

Authorizations:
apiKeyAuth
query Parameters
dateRange.fromDate	
string <date-time>
dateRange.toDate	
string <date-time>
resolution	
string
Aggregation resolution with second precision.

Resolution must be between 1 second and date_range interval

filters.application	
Array of strings
filters.subsystem	
Array of strings
Responses
200 A successful response.(streaming responses)
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v2/datausage/spanscount
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v2/datausage/spanscount?dateRange.fromDate=SOME_STRING_VALUE&dateRange.toDate=SOME_STRING_VALUE&resolution=SOME_STRING_VALUE&filters.application=SOME_ARRAY_VALUE&filters.subsystem=SOME_ARRAY_VALUE';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"result": {
"spansCount": []
},
"error": {
"code": 0,
"message": "string",
"details": []
}
}
Target Service
View and manage your storage targets for logs.

Find out more about archives
Get target
No description available

Authorizations:
apiKeyAuth
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v2/target
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v2/target';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"target": {
"s3": {},
"ibmCos": {},
"archiveSpec": {}
}
}
Set target
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
This data structure is used to set a storage target for logs.

isActive
required
boolean
s3	
object (S3 Target Spec)
This data structure represents an S3 target.

Find out more about archives
ibmCos	
object (IBM COS Target Spec)
This data structure represents an IBM COS target.

Find out more about archives
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v2/target
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"isActive": true,
"s3": {
"bucket": "bucket",
"region": "us-west-2"
},
"ibmCos": {
"bucketCrn": "bucket_crn",
"endpoint": "http://some.endpoint.com:8081",
"serviceCrn": "service_crn",
"bucketType": "IBM_BUCKET_TYPE_UNSPECIFIED"
}
}
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"target": {
"s3": {},
"ibmCos": {},
"archiveSpec": {}
}
}
Validate target
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
This data structure is used to validate a storage target for logs.

isActive
required
boolean
s3	
object (S3 Target Spec)
This data structure represents an S3 target.

Find out more about archives
ibmCos	
object (IBM COS Target Spec)
This data structure represents an IBM COS target.

Find out more about archives
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v2/target:validate
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"isActive": true,
"s3": {
"bucket": "bucket",
"region": "us-west-2"
},
"ibmCos": {
"bucketCrn": "bucket_crn",
"endpoint": "http://some.endpoint.com:8081",
"serviceCrn": "service_crn",
"bucketType": "IBM_BUCKET_TYPE_UNSPECIFIED"
}
}
Response samples
200400401500default
Content type
application/json

Copy
{
"isValid": true
}
Team Permissions Management Service
Manage Team Groups.

Get Team Group By Name
No description available

Authorizations:
apiKeyAuth
query Parameters
name	
string
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v1/teams/groups
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/teams/groups?name=SOME_STRING_VALUE';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"group": {
"groupId": {},
"name": "string",
"description": "string",
"externalId": "string",
"groupOrigin": "GROUP_ORIGIN_UNSPECIFIED",
"teamId": {},
"roles": [],
"scope": {},
"createdAt": "2019-08-24T14:15:22Z",
"updatedAt": "2019-08-24T14:15:22Z",
"nextGenScopeId": "string"
}
}
Create Team Group
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
Request to create a new team group with specified name, description, roles, users, and optional scope filters. Can be associated with a specific team or the authenticated team.

name	
string (/ Team group name)
teamId	
object (coralogixpermissionsv1TeamId)
description	
string (/ Team group description)
externalId	
string
/ Team group external_id. Applies if team is externally defined.

roleIds	
Array of objects (/ Roles to associate with team group)
userIds	
Array of objects (/ Users to associate with team group)
scopeFilters	
object (/ Scope filters are currently possible to be defined for subsystems and applications)
nextGenScopeId	
string
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/teams/groups
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"name": "string",
"teamId": {
"id": 0
},
"description": "string",
"externalId": "string",
"roleIds": [
{}
],
"userIds": [
{}
],
"scopeFilters": {
"subsystems": [],
"applications": []
},
"nextGenScopeId": "string"
}
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"groupId": {
"id": 0
}
}
Update Team Group
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
Request to modify an existing team group's details, including its name, description, roles, users, and scope settings.

groupId	
object (TeamGroupId)
This data structure represents the information associated with a team group.

Find out more about groups
name	
string (/ Updated team group name)
description	
string (/ Updated team group description)
externalId	
string (/ Updated team group external_id)
roleUpdates	
object (RoleUpdates)
This data structure represents the information associated with an API key.

Find out more about groups
userUpdates	
object (UserUpdates)
This data structure represents the information associated with an API key.

Find out more about groups
scopeFilters	
object (/ Scope filters are currently possible to be defined for subsystems and applications)
nextGenScopeId	
string (/ If set, updates new team group next gen scope)
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

put
/v1/teams/groups
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"groupId": {
"id": 0
},
"name": "string",
"description": "string",
"externalId": "string",
"roleUpdates": {
"roleIds": []
},
"userUpdates": {
"userIds": []
},
"scopeFilters": {
"subsystems": [],
"applications": []
},
"nextGenScopeId": "string"
}
Response samples
200400401500default
Content type
application/json

Copy
{ }
Get Team Groups
No description available

Authorizations:
apiKeyAuth
query Parameters
teamId.id	
integer <int64>
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v1/teams/groups/list
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/teams/groups/list?teamId.id=SOME_INTEGER_VALUE';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"groups": [
{}
]
}
Remove Users From Team Groups
No description available

Authorizations:
apiKeyAuth
query Parameters
teamId.id	
integer <int64>
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

delete
/v1/teams/groups/users
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/teams/groups/users?teamId.id=SOME_INTEGER_VALUE';

let options = {method: 'DELETE', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
{ }
Add Users To Team Groups
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
Bulk request to assign users to multiple team groups simultaneously, efficiently managing group memberships at scale.

teamId	
object (coralogixpermissionsv1TeamId)
addUsersToGroup	
Array of objects (AddUsersToTeamGroup)
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/teams/groups/users
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"teamId": {
"id": 0
},
"addUsersToGroup": [
{}
]
}
Response samples
200400401500default
Content type
application/json

Copy
{ }
Get Team Group
No description available

Authorizations:
apiKeyAuth
path Parameters
groupId.id
required
integer <int64>
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v1/teams/groups/{groupId.id}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7BgroupId.id%7D';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"group": {
"groupId": {},
"name": "string",
"description": "string",
"externalId": "string",
"groupOrigin": "GROUP_ORIGIN_UNSPECIFIED",
"teamId": {},
"roles": [],
"scope": {},
"createdAt": "2019-08-24T14:15:22Z",
"updatedAt": "2019-08-24T14:15:22Z",
"nextGenScopeId": "string"
}
}
Delete Team Group
No description available

Authorizations:
apiKeyAuth
path Parameters
groupId.id
required
integer <int64>
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

delete
/v1/teams/groups/{groupId.id}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7BgroupId.id%7D';

let options = {method: 'DELETE', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
{ }
Get Team Group Scope
No description available

Authorizations:
apiKeyAuth
path Parameters
groupId.id
required
integer <int64>
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v1/teams/groups/{groupId.id}/scope
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7BgroupId.id%7D/scope';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"scope": {
"id": {},
"filters": {}
}
}
Set Team Group Scope
No description available

Authorizations:
apiKeyAuth
path Parameters
groupId.id
required
integer <int64>
Request Body schema: application/json
required
groupId	
object (/ Team group to set scope to)
Find out more about groups
scopeFilters	
object (/ Scope filters are currently possible to be defined for subsystems and applications)
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/teams/groups/{groupId.id}/scope
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"groupId": { },
"scopeFilters": {
"subsystems": [],
"applications": []
}
}
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"scopeId": {
"id": 0
}
}
Get Group Users
No description available

Authorizations:
apiKeyAuth
path Parameters
groupId.id
required
integer <int64>
query Parameters
pageSize	
integer <int64>
/ Pagination size. Defaults to 100 if empty

pageToken	
string
/ Optional pagination continuation token / Contains an encoded cursor

Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v1/teams/groups/{groupId.id}/users
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7BgroupId.id%7D/users?pageSize=SOME_INTEGER_VALUE&pageToken=SOME_STRING_VALUE';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"users": [
{}
],
"noMorePages": { },
"token": {
"nextPageToken": "string"
}
}
Remove Users From Team Group
No description available

Authorizations:
apiKeyAuth
path Parameters
groupId.id
required
integer <int64>
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

delete
/v1/teams/groups/{groupId.id}/users
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/teams/groups/%7BgroupId.id%7D/users';

let options = {method: 'DELETE', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
{ }
Add Users To Team Group
No description available

Authorizations:
apiKeyAuth
path Parameters
groupId.id
required
integer <int64>
Request Body schema: application/json
required
groupId	
object (/ Team group id to add users to)
Find out more about groups
userIds	
Array of objects (/ Users to add to group)
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/teams/groups/{groupId.id}/users
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"groupId": { },
"userIds": [
{}
]
}
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"teamId": {
"id": 0
}
}
Extension service
A service that enables querying for extension information.

Learn more about extensions in our documentation.
Get all extensions
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
Request to list all extensions

includeHiddenExtensions	
boolean
Default: "false"
filter	
object (A filter structure for a request to get all extensions)
Filter by integration ids

Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/extensions/all
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"includeHiddenExtensions": "false",
"filter": {
"integrations": []
}
}
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"extensions": [
{}
]
}
Get extension by ID
No description available

Authorizations:
apiKeyAuth
path Parameters
id
required
string
query Parameters
includeDashboardBinaries	
boolean
Default: "false"
On the frontend, we don't need the dashboard binaries. But we need them for deployment in the extensions-service - so it's kind of a temporary argument, As soon all the deployment logic is moved to the extensions-api, it can be removed.

includeTestingRevision	
boolean
Default: "false"
Responses
200
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v1/extensions/{id}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/extensions/%7Bid%7D?includeDashboardBinaries=SOME_BOOLEAN_VALUE&includeTestingRevision=SOME_BOOLEAN_VALUE';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"id": "string",
"name": "string",
"image": "string",
"darkModeImage": "string",
"revisions": [
{}
],
"isHidden": "false",
"integrations": [
"[]"
],
"keywords": [
"[]"
],
"permissionDeniedRevisions": [
{}
],
"changelog": [
{}
],
"deprecation": {
"reason": "string",
"replacementExtensions": []
}
}
Extension deployment service
A service that enables querying for extension deployment information.

Find out more about extensions in our documentation.
Deploy extension
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
id
required
string
version
required
string
itemIds
required
Array of strings
applications	
Array of strings
subsystems	
Array of strings
extensionDeployment	
object (Extension deployment)
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/extension-deployment/deploy
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"id": "string",
"version": "string",
"itemIds": [
"[]"
],
"applications": [
"[]"
],
"subsystems": [
"[]"
],
"extensionDeployment": {
"id": "string",
"version": "string",
"itemIds": [],
"applications": [],
"subsystems": []
}
}
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"extensionDeployment": {
"id": "string",
"version": "string",
"itemIds": [],
"applications": [],
"subsystems": []
}
}
Get deployed extensions
No description available

Authorizations:
apiKeyAuth
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v1/extension-deployment/deployed
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/extension-deployment/deployed';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"deployedExtensions": [
{}
]
}
Revert deployment of extension
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
id
required
string
keptExtensionItems	
Array of strings
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/extension-deployment/undeploy
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"id": "string",
"keptExtensionItems": [
"[]"
]
}
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"failedItems": [
{}
],
"extensionDeployment": {
"id": "string",
"version": "string",
"itemIds": [],
"applications": [],
"subsystems": []
}
}
Update extension
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
id
required
string
version
required
string
itemIds
required
Array of strings
applications	
Array of strings
subsystems	
Array of strings
extensionDeployment	
object (Extension deployment)
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/extension-deployment/update
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"id": "string",
"version": "string",
"itemIds": [
"[]"
],
"applications": [
"[]"
],
"subsystems": [
"[]"
],
"extensionDeployment": {
"id": "string",
"version": "string",
"itemIds": [],
"applications": [],
"subsystems": []
}
}
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"extensionDeployment": {
"id": "string",
"version": "string",
"itemIds": [],
"applications": [],
"subsystems": []
}
}
Extension testing service
Find out more about extensions in our documentation.
Cleanup testing extension
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
id
required
string
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/extensions-testing/cleanup
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
{
"id": "string"
}
Response samples
200400401500default
Content type
application/json

Copy
{ }
Initialize testing revision
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
extensionData
required
object (Extension data)
Extension details for ingestion

Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/extensions-testing/initialize
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"extensionData": {
"id": "076f4188-05e0-4ed3-afeb-653ad182ccb7",
"name": "AWS CloudWatch Extension",
"description": "Integration with AWS CloudWatch for monitoring and logging",
"excerpt": "Monitor AWS resources and analyze logs with CloudWatch integration",
"image": "string",
"darkModeImage": "string",
"labels": [],
"version": "v1.0.13",
"items": [],
"integrationDetails": [],
"isHidden": "false",
"binaries": [],
"integrations": [],
"keywords": [],
"changelog": [],
"deprecation": {}
}
}
Response samples
200400401500default
Content type
application/json

Copy
{ }
Test extension revision
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
extensionData
required
object (Extension data)
Extension details for ingestion

cleanupAfterTest	
boolean
Default: "false"
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/extensions-testing/test
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"extensionData": {
"id": "076f4188-05e0-4ed3-afeb-653ad182ccb7",
"name": "AWS CloudWatch Extension",
"description": "Integration with AWS CloudWatch for monitoring and logging",
"excerpt": "Monitor AWS resources and analyze logs with CloudWatch integration",
"image": "string",
"darkModeImage": "string",
"labels": [],
"version": "v1.0.13",
"items": [],
"integrationDetails": [],
"isHidden": "false",
"binaries": [],
"integrations": [],
"keywords": [],
"changelog": [],
"deprecation": {}
},
"cleanupAfterTest": "false"
}
Response samples
200400401500default
Content type
application/json

Copy
{ }
Integration service
A service that enables querying for integration information.

Find out more about integrations in our documentation.
Get all integrations
No description available

Authorizations:
apiKeyAuth
query Parameters
includeTestingRevision	
boolean
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v1/integrations
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/integrations?includeTestingRevision=SOME_BOOLEAN_VALUE';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"integrations": [
{}
]
}
Get integration definition
No description available

Authorizations:
apiKeyAuth
path Parameters
id
required
string
query Parameters
includeTestingRevision	
boolean
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v1/integrations/definition/{id}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/integrations/definition/%7Bid%7D?includeTestingRevision=SOME_BOOLEAN_VALUE';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"integrationDefinition": {
"key": "string",
"integrationType": {},
"revisions": [],
"featureFlag": "string"
}
}
Get deployed integration
No description available

Authorizations:
apiKeyAuth
path Parameters
integrationId
required
string
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v1/integrations/deployed/{integrationId}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/integrations/deployed/%7BintegrationId%7D';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"integration": {
"id": "string",
"definitionKey": "string",
"definitionVersion": "string",
"parameters": [],
"integrationStatus": {}
}
}
Delete integration
No description available

Authorizations:
apiKeyAuth
path Parameters
integrationId
required
string
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

delete
/v1/integrations/instance/{integrationId}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/integrations/instance/%7BintegrationId%7D';

let options = {method: 'DELETE', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
{ }
List managed integration keys
No description available

Authorizations:
apiKeyAuth
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v1/integrations/managed/list
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/integrations/managed/list';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"integrationKeys": [
"string"
]
}
Get managed integration status
No description available

Authorizations:
apiKeyAuth
path Parameters
integrationId
required
string
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v1/integrations/managed/status/{integrationId}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/integrations/managed/status/%7BintegrationId%7D';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"integrationId": "string",
"status": {
"connectionStatus": "PENDING",
"details": {},
"messages": []
}
}
Save integration registration metadata
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
metadata
required
object (Integration metadata)
This data structure represents the metadata of an integration.

Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/integrations/metadata
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"metadata": {
"integrationKey": "string",
"version": "string",
"integrationParameters": {}
}
}
Response samples
200400401500default
Content type
application/json

Copy
{
"integrationId": "string"
}
Update integration
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
This data structure represents a list of outgoing webhook types.

id
required
string (This is the integration ID generated at creation time)
metadata
required
object (Integration metadata)
This data structure represents the metadata of an integration.

Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

put
/v1/integrations/metadata
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"id": "string",
"metadata": {
"integrationKey": "string",
"version": "string",
"integrationParameters": {}
}
}
Response samples
200400401500default
Content type
application/json

Copy
{ }
Test integration
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
integrationData
required
object (Integration metadata)
This data structure represents the metadata of an integration.

integrationId	
string
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/integrations/metadata/test
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"integrationData": {
"integrationKey": "string",
"version": "string",
"integrationParameters": {}
},
"integrationId": "string"
}
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"result": {
"success": { },
"failure": {}
}
}
Get RUM integration versions data
No description available

Authorizations:
apiKeyAuth
query Parameters
applicationName
required
string
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v1/integrations/rum/app-versions
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/integrations/rum/app-versions?applicationName=SOME_STRING_VALUE';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"versionData": {
"versions": [],
"syncedAt": "2019-08-24T14:15:22Z"
}
}
Trigger sync of RUM integration data
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
force	
boolean
The time between syncs is controlled by configuration.

Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/integrations/rum/sync
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
{
"force": true
}
Response samples
200400401500default
Content type
application/json

Copy
{
"syncExecuted": true,
"syncedAt": "2019-08-24T14:15:22Z"
}
Get integration template
No description available

Authorizations:
apiKeyAuth
query Parameters
integrationId
required
string
commonArmParams.logsUrl
required
string
commonArmParams.apiKey
required
string
commonArmParams.cgxDomain
required
string
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v1/integrations/template
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/integrations/template?integrationId=SOME_STRING_VALUE&commonArmParams.logsUrl=SOME_STRING_VALUE&commonArmParams.apiKey=SOME_STRING_VALUE&commonArmParams.cgxDomain=SOME_STRING_VALUE';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
{
"templateUrl": "string"
}
Get integration details
No description available

Authorizations:
apiKeyAuth
path Parameters
id
required
string
query Parameters
includeTestingRevision	
boolean
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v1/integrations/{id}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/integrations/%7Bid%7D?includeTestingRevision=SOME_BOOLEAN_VALUE';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"integrationDetail": {
"integration": {},
"extensions": [],
"docs": [],
"default": {},
"local": {},
"external": {}
}
}
Contextual data integration service
Query for contextual data integration information.

Save contextual data integration
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
metadata
required
object (Integration metadata)
This data structure represents the metadata of an integration.

Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/contextual-data/integration
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"metadata": {
"integrationKey": "string",
"version": "string",
"integrationParameters": {}
}
}
Response samples
200400401500default
Content type
application/json

Copy
{
"integrationId": "string"
}
Update contextual data integration
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
integrationId
required
string
metadata
required
object (Integration metadata)
This data structure represents the metadata of an integration.

Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

put
/v1/contextual-data/integration
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"integrationId": "string",
"metadata": {
"integrationKey": "string",
"version": "string",
"integrationParameters": {}
}
}
Response samples
200400401500default
Content type
application/json

Copy
{ }
Test contextual data integration
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
integrationData
required
object (Integration metadata)
This data structure represents the metadata of an integration.

integrationId	
string
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/contextual-data/integration/test
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"integrationData": {
"integrationKey": "string",
"version": "string",
"integrationParameters": {}
},
"integrationId": "string"
}
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"result": {
"success": { },
"failure": {}
}
}
Delete contextual data integration
No description available

Authorizations:
apiKeyAuth
path Parameters
integrationId
required
string
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

delete
/v1/contextual-data/integration/{integrationId}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/contextual-data/integration/%7BintegrationId%7D';

let options = {method: 'DELETE', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
{ }
Get all contextual data integrations accessible
No description available

Authorizations:
apiKeyAuth
query Parameters
includeTestingIntegrations	
boolean
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v1/contextual-data/integrations
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/contextual-data/integrations?includeTestingIntegrations=SOME_BOOLEAN_VALUE';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"integrations": [
{}
]
}
Get contextual data integration definition
No description available

Authorizations:
apiKeyAuth
path Parameters
id
required
string
query Parameters
includeTestingIntegrations	
boolean
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v1/contextual-data/integrations/definition/{id}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/contextual-data/integrations/definition/%7Bid%7D?includeTestingIntegrations=SOME_BOOLEAN_VALUE';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"integrationDefinition": {
"key": "string",
"integrationType": {},
"revisions": [],
"featureFlag": "string"
}
}
Get contextual data integration details
No description available

Authorizations:
apiKeyAuth
path Parameters
id
required
string
query Parameters
includeTestingRevisions	
boolean
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v1/contextual-data/integrations/{id}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/contextual-data/integrations/%7Bid%7D?includeTestingRevisions=SOME_BOOLEAN_VALUE';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"integrationDetail": {
"integration": {},
"extensions": [],
"docs": [],
"default": {},
"local": {},
"external": {}
}
}
Outgoing webhooks service
Find out more about outbound webhooks in our documentation.
List outgoing webhooks
No description available

Authorizations:
apiKeyAuth
query Parameters
type
required
string
Default: "UNKNOWN"
Enum: "UNKNOWN" "GENERIC" "SLACK" "PAGERDUTY" "SEND_LOG" "EMAIL_GROUP" "MICROSOFT_TEAMS" "JIRA" "OPSGENIE" "DEMISTO" "AWS_EVENT_BRIDGE" "IBM_EVENT_NOTIFICATIONS" "MS_TEAMS_WORKFLOW"
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v1/outgoing-webhooks
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/outgoing-webhooks?type=SOME_STRING_VALUE';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"deployed": [
{}
]
}
Create an outgoing webhook
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
data
required
object (Outgoing webhook input data)
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/outgoing-webhooks
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"data": {
"type": "UNKNOWN",
"name": "my_webhook",
"url": "slack.webhook.com",
"genericWebhook": {},
"slack": {},
"pagerDuty": {},
"sendLog": {},
"emailGroup": {},
"microsoftTeams": { },
"jira": {},
"opsgenie": { },
"demisto": {},
"awsEventBridge": {},
"ibmEventNotifications": {},
"msTeamsWorkflow": { }
}
}
Response samples
200400401500default
Content type
application/json

Copy
{
"id": "example_id"
}
Update an outgoing webhook
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
id
required
string
data
required
object (Outgoing webhook input data)
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

put
/v1/outgoing-webhooks
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"id": "example_id",
"data": {
"type": "UNKNOWN",
"name": "my_webhook",
"url": "slack.webhook.com",
"genericWebhook": {},
"slack": {},
"pagerDuty": {},
"sendLog": {},
"emailGroup": {},
"microsoftTeams": { },
"jira": {},
"opsgenie": { },
"demisto": {},
"awsEventBridge": {},
"ibmEventNotifications": {},
"msTeamsWorkflow": { }
}
}
Response samples
200400401500default
Content type
application/json

Copy
{ }
List all outgoing webhooks
No description available

Authorizations:
apiKeyAuth
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v1/outgoing-webhooks/all
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/outgoing-webhooks/all';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"deployed": [
{}
]
}
List IBM event notification instances
No description available

Authorizations:
apiKeyAuth
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v1/outgoing-webhooks/ibm-event-notifications/instances
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/outgoing-webhooks/ibm-event-notifications/instances';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"instances": [
{}
]
}
List outbound webhooks summary
No description available

Authorizations:
apiKeyAuth
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v1/outgoing-webhooks/summary
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/outgoing-webhooks/summary';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"outboundWebhookSummaries": [
{}
]
}
Test an outgoing webhook
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
data
required
object (Outgoing webhook input data)
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/outgoing-webhooks/test
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"data": {
"type": "UNKNOWN",
"name": "my_webhook",
"url": "slack.webhook.com",
"genericWebhook": {},
"slack": {},
"pagerDuty": {},
"sendLog": {},
"emailGroup": {},
"microsoftTeams": { },
"jira": {},
"opsgenie": { },
"demisto": {},
"awsEventBridge": {},
"ibmEventNotifications": {},
"msTeamsWorkflow": { }
}
}
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"success": { },
"failure": {
"errorMessage": "example_error_message",
"displayMessage": "example_display_message",
"statusCode": 400
}
}
Test an existing outgoing webhook
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
id
required
string
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/outgoing-webhooks/test-existing
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
{
"id": "example_id"
}
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"success": { },
"failure": {
"errorMessage": "example_error_message",
"displayMessage": "example_display_message",
"statusCode": 400
}
}
Get outgoing webhook types
No description available

Authorizations:
apiKeyAuth
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v1/outgoing-webhooks/types
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/outgoing-webhooks/types';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"webhooks": [
{}
]
}
Get outgoing webhook type details
No description available

Authorizations:
apiKeyAuth
path Parameters
type
required
string
Enum: "UNKNOWN" "GENERIC" "SLACK" "PAGERDUTY" "SEND_LOG" "EMAIL_GROUP" "MICROSOFT_TEAMS" "JIRA" "OPSGENIE" "DEMISTO" "AWS_EVENT_BRIDGE" "IBM_EVENT_NOTIFICATIONS" "MS_TEAMS_WORKFLOW"
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v1/outgoing-webhooks/types/{type}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/outgoing-webhooks/types/%7Btype%7D';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"details": {
"type": "UNKNOWN",
"label": "example_label"
}
}
Get outgoing webhook
No description available

Authorizations:
apiKeyAuth
path Parameters
id
required
string
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v1/outgoing-webhooks/{id}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/outgoing-webhooks/%7Bid%7D';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"webhook": {
"id": "webhook_id",
"type": "UNKNOWN",
"name": "my_webhook",
"url": "slack.webhook.com",
"createdAt": "2024-10-20T00:00:00.000Z",
"updatedAt": "2024-10-20T00:00:00.000Z",
"externalId": "external_id_example",
"genericWebhook": {},
"slack": {},
"pagerDuty": {},
"sendLog": {},
"emailGroup": {},
"microsoftTeams": { },
"jira": {},
"opsgenie": { },
"demisto": {},
"awsEventBridge": {},
"ibmEventNotifications": {},
"msTeamsWorkflow": { }
}
}
Delete an outgoing webhook
No description available

Authorizations:
apiKeyAuth
path Parameters
id
required
string
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

delete
/v1/outgoing-webhooks/{id}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/outgoing-webhooks/%7Bid%7D';

let options = {method: 'DELETE', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
{ }
Rule Groups Service
A service to manage rule groups.

Get Rule Group Model Mapping
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
name	
string
description	
string
enabled	
boolean
hidden	
boolean
creator	
string
ruleMatchers	
Array of objects (v1RuleMatcher)
ruleSubgroups	
Array of objects (v1GetRuleGroupModelMappingRequestCreateRuleSubgroup)
order	
integer <int64>
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/api/v1/rulegroup-mapping
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"name": "string",
"description": "string",
"enabled": true,
"hidden": true,
"creator": "string",
"ruleMatchers": [
{}
],
"ruleSubgroups": [
{}
],
"order": 0
}
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"ruleDefinition": { }
}
List Rule Groups
No description available

Authorizations:
apiKeyAuth
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/api/v1/rulegroups
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/api/v1/rulegroups';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"ruleGroups": [
{}
]
}
Bulk Delete Rule Group
No description available

Authorizations:
apiKeyAuth
query Parameters
groupIds	
Array of strings
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

delete
/api/v1/rulegroups
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/api/v1/rulegroups?groupIds=SOME_ARRAY_VALUE';

let options = {method: 'DELETE', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
{ }
Create Rule Group
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
name	
string
description	
string
enabled	
boolean
hidden	
boolean
creator	
string
ruleMatchers	
Array of objects (v1RuleMatcher)
ruleSubgroups	
Array of objects (v1CreateRuleGroupRequestCreateRuleSubgroup)
order	
integer <int64>
teamId	
object (coralogixrulesv1TeamId)
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/api/v1/rulegroups
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"name": "string",
"description": "string",
"enabled": true,
"hidden": true,
"creator": "string",
"ruleMatchers": [
{}
],
"ruleSubgroups": [
{}
],
"order": 0,
"teamId": {
"id": 0
}
}
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"ruleGroup": {
"id": "string",
"name": "string",
"description": "string",
"creator": "string",
"enabled": true,
"hidden": true,
"ruleMatchers": [],
"ruleSubgroups": [],
"order": 0
}
}
Get Company Usage Limits
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
object (v1GetCompanyUsageLimitsRequest)
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/api/v1/rulegroups/company-limits
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
{ }
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"companyId": "string",
"limits": {
"parsingThemes": 0,
"groups": 0,
"rules": 0
},
"usage": {
"parsingThemes": 0,
"groups": 0,
"rules": 0
}
}
Get Rule Group
No description available

Authorizations:
apiKeyAuth
path Parameters
groupId
required
string
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/api/v1/rulegroups/{groupId}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/api/v1/rulegroups/%7BgroupId%7D';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"ruleGroup": {
"id": "string",
"name": "string",
"description": "string",
"creator": "string",
"enabled": true,
"hidden": true,
"ruleMatchers": [],
"ruleSubgroups": [],
"order": 0
}
}
Delete Rule Group
No description available

Authorizations:
apiKeyAuth
path Parameters
groupId
required
string
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

delete
/api/v1/rulegroups/{groupId}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/api/v1/rulegroups/%7BgroupId%7D';

let options = {method: 'DELETE', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
{ }
Update Rule Group
No description available

Authorizations:
apiKeyAuth
path Parameters
groupId
required
string
Request Body schema: application/json
required
name	
string
description	
string
enabled	
boolean
hidden	
boolean
creator	
string
ruleMatchers	
Array of objects (v1RuleMatcher)
ruleSubgroups	
Array of objects (v1CreateRuleGroupRequestCreateRuleSubgroup)
order	
integer <int64>
teamId	
object (coralogixrulesv1TeamId)
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

put
/api/v1/rulegroups/{groupId}
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"name": "string",
"description": "string",
"enabled": true,
"hidden": true,
"creator": "string",
"ruleMatchers": [
{}
],
"ruleSubgroups": [
{}
],
"order": 0,
"teamId": {
"id": 0
}
}
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"ruleGroup": {
"id": "string",
"name": "string",
"description": "string",
"creator": "string",
"enabled": true,
"hidden": true,
"ruleMatchers": [],
"ruleSubgroups": [],
"order": 0
}
}
Enrichments Service
Manage your enrichments.

Get Enrichments
No description available

Authorizations:
apiKeyAuth
Responses
200 A successful response.
default An unexpected error response.

get
/enrichments
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/enrichments';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"enrichments": [
{}
]
}
Delete Enrichments
No description available

Authorizations:
apiKeyAuth
query Parameters
enrichmentIds
required
Array of integers <int64> [ items <int64 > ]
Responses
200 A successful response.
default An unexpected error response.

delete
/enrichments
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/enrichments?enrichmentIds=SOME_ARRAY_VALUE';

let options = {method: 'DELETE', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"remainingEnrichments": [
{}
]
}
Add Enrichments
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
This response data structure represents a collection of enrichments

requestEnrichments
required
Array of objects (Enrichment Prototype)
Responses
200 A successful response.
default An unexpected error response.

post
/enrichments
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"requestEnrichments": [
{}
]
}
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"enrichments": [
{}
]
}
Get Enrichment Limit
No description available

Authorizations:
apiKeyAuth
Responses
200 A successful response.
default An unexpected error response.

get
/enrichments/limit
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/enrichments/limit';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200default
Content type
application/json

Copy
{
"limit": 10,
"used": 5
}
Get Company Enrichment Settings
No description available

Authorizations:
apiKeyAuth
Responses
200 A successful response.
default An unexpected error response.

get
/enrichments/settings
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/enrichments/settings';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"enrichmentSettings": {
"enrichmentAmountLimit": 0,
"enrichmentsInUse": 0,
"sizeLimitBytes": "string",
"rowLimit": 0,
"queryOnlySizeLimitBytes": "string",
"queryOnlyRowLimit": 0
}
}
Atomic Overwrite Enrichments
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
enrichmentType	
object (coralogixenrichmentv1EnrichmentType)
enrichmentFields	
Array of objects (v1EnrichmentFieldDefinition)
Responses
200 A successful response.
default An unexpected error response.

patch
/enrichments:atomicOverwrite
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"enrichmentType": {
"geoIp": {},
"suspiciousIp": { },
"aws": {},
"customEnrichment": {}
},
"enrichmentFields": [
{}
]
}
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"enrichments": [
{}
]
}
Custom Enrichments Service
Manage your enrichments.

Get Custom Enrichments
No description available

Authorizations:
apiKeyAuth
Responses
200 A successful response.
default An unexpected error response.

get
/v1/custom_enrichment
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/custom_enrichment';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"customEnrichments": [
{}
]
}
Create Custom Enrichments
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
This request data structure is used to create a custom enrichment

name
required
string
description
required
string
file
required
object (File)
This data structure represents a file

Find out more about enrichments
Responses
200 A successful response.
default An unexpected error response.

post
/v1/custom_enrichment
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"name": "custom_enrichment_name",
"description": "custom_enrichment_description",
"file": {
"name": "file_name",
"extension": "csv",
"size": 100,
"textual": "row1,row2 value1,value2",
"binary": "0xFABB32"
}
}
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"message": "Custom enrichment created successfully",
"customEnrichment": {
"id": 0,
"name": "string",
"description": "string",
"version": 0,
"isQueryOnly": true,
"fileName": "string",
"fileSize": 0
}
}
Update Custom Enrichment
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
This request data structure is used to update a custom enrichment

customEnrichmentId
required
integer <int64>
name
required
string
description
required
string
file
required
object (File)
This data structure represents a file

Find out more about enrichments
Responses
200 A successful response.
default An unexpected error response.

put
/v1/custom_enrichment
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"customEnrichmentId": 1,
"name": "custom_enrichment_name",
"description": "custom_enrichment_description",
"file": {
"name": "file_name",
"extension": "csv",
"size": 100,
"textual": "row1,row2 value1,value2",
"binary": "0xFABB32"
}
}
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"message": "Custom enrichment updated successfully",
"customEnrichment": {
"id": 0,
"name": "string",
"description": "string",
"version": 0,
"isQueryOnly": true,
"fileName": "string",
"fileSize": 0
}
}
Search Custom Enrichment Data
No description available

Authorizations:
apiKeyAuth
Responses
200 A successful response.
default An unexpected error response.

post
/v1/custom_enrichment/search
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/custom_enrichment/search';

let options = {method: 'POST', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"customEnrichmentsData": [
{}
]
}
Delete Custom Enrichments
No description available

Authorizations:
apiKeyAuth
path Parameters
customEnrichmentId
required
integer <int64>
Responses
200 A successful response.
default An unexpected error response.

delete
/v1/custom_enrichment/{customEnrichmentId}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/custom_enrichment/%7BcustomEnrichmentId%7D';

let options = {method: 'DELETE', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200default
Content type
application/json

Copy
{
"message": "Custom enrichment deleted successfully",
"customEnrichmentId": 1
}
Get Custom Enrichment
No description available

Authorizations:
apiKeyAuth
path Parameters
id
required
integer <int64>
Responses
200 A successful response.
default An unexpected error response.

get
/v1/custom_enrichment/{id}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/custom_enrichment/%7Bid%7D';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200default
Content type
application/json

Copy
Expand allCollapse all
{
"customEnrichment": {
"id": 0,
"name": "string",
"description": "string",
"version": 0,
"isQueryOnly": true,
"fileName": "string",
"fileSize": 0
}
}
Policies Service
View and manage your TCO policies

Get Company Policies
No description available

Authorizations:
apiKeyAuth
query Parameters
enabledOnly
required
boolean
sourceType
required
string
Default: "SOURCE_TYPE_UNSPECIFIED"
Enum: "SOURCE_TYPE_UNSPECIFIED" "SOURCE_TYPE_LOGS" "SOURCE_TYPE_SPANS"
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v1/policies
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/policies?enabledOnly=SOME_BOOLEAN_VALUE&sourceType=SOME_STRING_VALUE';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"policies": [
{}
]
}
Get Policy by ID
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
This data structue is used to create a new policy.

name
required
string
description	
string
priority
required
string (coralogixquotav1Priority)
Default: "PRIORITY_TYPE_UNSPECIFIED"
Enum: "PRIORITY_TYPE_UNSPECIFIED" "PRIORITY_TYPE_BLOCK" "PRIORITY_TYPE_LOW" "PRIORITY_TYPE_MEDIUM" "PRIORITY_TYPE_HIGH"
applicationRule	
object (coralogixquotav1Rule)
subsystemRule	
object (coralogixquotav1Rule)
archiveRetention	
object (v1ArchiveRetention)
logRules	
object (Log Rules)
Log rules for a policy.

Find out more about quota management.
spanRules	
object (v1SpanRules)
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/policies
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"name": "My Policy",
"description": "My Policy Description",
"priority": "PRIORITY_TYPE_UNSPECIFIED",
"applicationRule": {
"ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
"name": "string"
},
"subsystemRule": {
"ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
"name": "string"
},
"archiveRetention": {
"id": "string"
},
"logRules": {
"severities": []
},
"spanRules": {
"serviceRule": {},
"actionRule": {},
"tagRules": []
}
}
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"policy": {
"id": "policy_id",
"companyId": 1234,
"name": "My Policy",
"description": "My Policy Description",
"priority": "PRIORITY_TYPE_UNSPECIFIED",
"deleted": false,
"enabled": true,
"order": 1,
"applicationRule": {},
"subsystemRule": {},
"logRules": {},
"spanRules": {},
"createdAt": "2021-01-01T00:00:00.000Z",
"updatedAt": "2021-01-01T00:00:00.000Z",
"archiveRetention": {}
}
}
Update Policy
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
This data structue is used to update an existing policy.

id
required
string
name	
string
description	
string
priority	
string (coralogixquotav1Priority)
Default: "PRIORITY_TYPE_UNSPECIFIED"
Enum: "PRIORITY_TYPE_UNSPECIFIED" "PRIORITY_TYPE_BLOCK" "PRIORITY_TYPE_LOW" "PRIORITY_TYPE_MEDIUM" "PRIORITY_TYPE_HIGH"
applicationRule	
object (coralogixquotav1Rule)
subsystemRule	
object (coralogixquotav1Rule)
archiveRetention	
object (v1ArchiveRetention)
logRules	
object (Log Rules)
Log rules for a policy.

Find out more about quota management.
spanRules	
object (v1SpanRules)
enabled	
boolean
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

put
/v1/policies
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"id": "policy_id",
"name": "My Policy",
"description": "My Policy Description",
"priority": "PRIORITY_TYPE_UNSPECIFIED",
"applicationRule": {
"ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
"name": "string"
},
"subsystemRule": {
"ruleTypeId": "RULE_TYPE_ID_UNSPECIFIED",
"name": "string"
},
"archiveRetention": {
"id": "string"
},
"logRules": {
"severities": []
},
"spanRules": {
"serviceRule": {},
"actionRule": {},
"tagRules": []
},
"enabled": true
}
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"policy": {
"id": "policy_id",
"companyId": 1234,
"name": "My Policy",
"description": "My Policy Description",
"priority": "PRIORITY_TYPE_UNSPECIFIED",
"deleted": false,
"enabled": true,
"order": 1,
"applicationRule": {},
"subsystemRule": {},
"logRules": {},
"spanRules": {},
"createdAt": "2021-01-01T00:00:00.000Z",
"updatedAt": "2021-01-01T00:00:00.000Z",
"archiveRetention": {}
}
}
Get Policy by ID
No description available

Authorizations:
apiKeyAuth
path Parameters
id
required
string
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v1/policies/{id}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/policies/%7Bid%7D';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"policy": {
"id": "policy_id",
"companyId": 1234,
"name": "My Policy",
"description": "My Policy Description",
"priority": "PRIORITY_TYPE_UNSPECIFIED",
"deleted": false,
"enabled": true,
"order": 1,
"applicationRule": {},
"subsystemRule": {},
"logRules": {},
"spanRules": {},
"createdAt": "2021-01-01T00:00:00.000Z",
"updatedAt": "2021-01-01T00:00:00.000Z",
"archiveRetention": {}
}
}
Delete Policy
No description available

Authorizations:
apiKeyAuth
path Parameters
id
required
string
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

delete
/v1/policies/{id}
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/policies/%7Bid%7D';

let options = {method: 'DELETE', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
{
"id": "id"
}
Atomic Overwrite Log Policies
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
In an atomic operation delete all existing log policies and create the provided list by order.

policies
required
Array of objects (Create Log Policy Request)
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/policies:atomicOverwriteLogPolicies
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"policies": [
{}
]
}
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"createResponses": [
{}
]
}
Atomic Overwrite Span Policies
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
In an atomic operation delete all existing span policies and create the provided list by order.

policies
required
Array of objects (Create Span Policy Request)
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/policies:atomicOverwriteSpanPolicies
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"policies": [
{}
]
}
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"createResponses": [
{}
]
}
Atomic Batch Create Policy
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
This data structure is used to create multiple policies atomically.

policyRequests
required
Array of objects (Create Policy Request)
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/policies:bulkCreate
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"policyRequests": [
{}
]
}
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"createResponses": [
{}
]
}
Bulk Test Log Policies
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
Request to test multiple log policies.

metaFieldsValuesList
required
Array of objects (Log Meta Fields Values)
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/policies:bulkTestLog
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"metaFieldsValuesList": [
{}
]
}
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"testPoliciesBulkResult": [
{}
]
}
Reorder Policies
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
This data structue is used to reorder policies.

orders
required
Array of objects (Policy Order)
sourceType
required
string (quotav1SourceType)
Default: "SOURCE_TYPE_UNSPECIFIED"
Enum: "SOURCE_TYPE_UNSPECIFIED" "SOURCE_TYPE_LOGS" "SOURCE_TYPE_SPANS"
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/policies:reorder
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"orders": [
{}
],
"sourceType": "SOURCE_TYPE_UNSPECIFIED"
}
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"orders": [
{}
]
}
Toggle Policies
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
This data structue is used to toggle a policy by its ID.

id
required
string
enabled
required
boolean
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/policies:toggle
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
{
"id": "id",
"enabled": true
}
Response samples
200400401500default
Content type
application/json

Copy
{
"id": "id",
"enabled": true
}
Retentions Service
Get Retentions
No description available

Authorizations:
apiKeyAuth
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v1/retentions
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/retentions';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"retentions": [
{}
]
}
Update Retentions
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
This data structure is used to update retentions

retentionUpdateElements
required
Array of objects (v1RetentionUpdateElement)
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/retentions
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
Expand allCollapse all
{
"retentionUpdateElements": [
{}
]
}
Response samples
200400401500default
Content type
application/json

Copy
Expand allCollapse all
{
"retentions": [
{}
]
}
Get Retentions Enabled
No description available

Authorizations:
apiKeyAuth
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

get
/v1/retentions/enabled
Request samples
NodePythonShell

Copy
const fetch = require('node-fetch');

let url = 'https://api.coralogix.com/mgmt/openapi/v1/retentions/enabled';

let options = {method: 'GET', headers: {Authorization: 'Bearer <API_KEY>'}};

fetch(url, options)
  .then(res => res.json())
  .then(json => console.log(json))
  .catch(err => console.error('error:' + err));
Response samples
200400401500default
Content type
application/json

Copy
{
"enableTags": true
}
Activate Retentions
No description available

Authorizations:
apiKeyAuth
Request Body schema: application/json
required
object (v1ActivateRetentionsRequest)
Responses
200 A successful response.
400 Bad Request
401 Unauthorized request
500 Internal server error
default An unexpected error response.

post
/v1/retentions:activate
Request samples
PayloadNodePythonShell
Content type
application/json

Copy
{ }
Response samples
200400401500default
Content type
application/json

Copy
{
"activateRetentions": true
}
